<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:popup="pl.znr.heatmaster.ui.components.popup.*"
               xmlns:panel="pl.znr.heatmaster.ui.components.panel.*"
               xmlns:hmbtn="pl.znr.heatmaster.ui.components.button.*"
               width="100%"
               height="100%"
               xmlns:s="library://ns.adobe.com/flex/spark"
               skinClass="pl.znr.heatmaster.ui.components.skins.CustomSparkApplicationSkin"
               creationComplete="appInitialized()"
               initialize="initHeatMaster()"
               preinitialize="preinitialize()"
               pageTitle="HeatMaster"
               preloader="pl.znr.heatmaster.CustomPreloader">


    <fx:Metadata>
        [ResourceBundle("hm")]
    </fx:Metadata>

    <fx:Metadata>
        [Event(name="langChange", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Declarations>

        <fx:XML id="countriesXML" format="e4x" source="/config.xml"/>
        <fx:XML id="stationsXML" format="e4x" source="/stations.xml"/>
        <fx:XML id="dictionaryXML" format="e4x" source="/dictionaries.xml"/>

        <s:BitmapFill id="bgGrass"
                      source="@Embed('/pl/znr/heatmaster/assets/images/backgrounds/background_grass.png')"/>
        <s:BitmapFill id="bgSky" source="@Embed('/pl/znr/heatmaster/assets/images/backgrounds/background_sky.png')"/>

        <s:HTTPService id="httpServiceCountries"
                       resultFormat="e4x"
                       url="pl/znr/heatmaster/assets/XML/config.xml"
                       fault="httpServiceFault(event);" showBusyCursor="true" requestTimeout="10"
                       result="httpServiceResult(XMLType.COUNTRIES,event)"/>
        <s:HTTPService id="httpServiceStations"
                       resultFormat="e4x"
                       url="pl/znr/heatmaster/assets/XML/stations.xml"
                       fault="httpServiceFault(event);" showBusyCursor="true" requestTimeout="10"
                       result="httpServiceResult(XMLType.COUNTRIES,event)"/>
        <s:HTTPService id="httpServiceDictionaries"
                       resultFormat="e4x"
                       url="pl/znr/heatmaster/assets/XML/dictionaries.xml"
                       fault="httpServiceFault(event);" showBusyCursor="true" requestTimeout="10"
                       result="httpServiceResult(XMLType.DICTIONARIES,event)"/>

    </fx:Declarations>


    <fx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.core.IToolTip;
        import mx.core.IVisualElementContainer;
        import mx.core.UIComponent;
        import mx.managers.BrowserManager;
        import mx.managers.ToolTipManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import pl.znr.heatmaster.config.BusinessConfiguration;
        import pl.znr.heatmaster.config.BusinessConfigurationReader;
        import pl.znr.heatmaster.config.CountryItem;
        import pl.znr.heatmaster.config.CountryItemHelper;
        import pl.znr.heatmaster.config.IEnvironmentalDataConfig;
        import pl.znr.heatmaster.config.RegionItem;
        import pl.znr.heatmaster.config.StationItem;
        import pl.znr.heatmaster.config.StationsConfig;
        import pl.znr.heatmaster.constants.XMLType;
        import pl.znr.heatmaster.constants.XMLType;
        import pl.znr.heatmaster.core.DataContext;
        import pl.znr.heatmaster.core.HeatMasterChangeListener;
        import pl.znr.heatmaster.core.HeatMasterController;
        import pl.znr.heatmaster.core.HouseStandardChangeListener;
        import pl.znr.heatmaster.core.IBuildingAgeChangeListener;
        import pl.znr.heatmaster.core.LangChangeListener;
        import pl.znr.heatmaster.core.StateDataContext;
        import pl.znr.heatmaster.core.cache.CachedDataContextManager;
        import pl.znr.heatmaster.core.model.EnvironmentalData;
        import pl.znr.heatmaster.core.model.InsolationData;
        import pl.znr.heatmaster.core.state.CalculationStateController;
        import pl.znr.heatmaster.core.state.ComparingProcessingResult;
        import pl.znr.heatmaster.core.state.ICalculationStateListener;
        import pl.znr.heatmaster.locale.HeatMasterLocaleManager;
        import pl.znr.heatmaster.locale.LangHelper;
        import pl.znr.heatmaster.ui.builder.prepare.EnvironmentalDataPreparer;
        import pl.znr.heatmaster.ui.components.HeatMasterComponent;
        import pl.znr.heatmaster.ui.components.HeatMasterResultComponent;
        import pl.znr.heatmaster.ui.components.panel.BalanceReportPanel;
        import pl.znr.heatmaster.ui.components.panel.StationsPanel;

        import spark.primitives.BitmapImage;
        import spark.utils.TextFlowUtil;

        public static const CURRENCY_EURO_LOCALE_CODE:String = 'hm.currency.euro';
        public static const YEAR_COST_SUFFIX_CODE:String = 'year_cost';
        public static const MONTH_COST_SUFFIX_CODE:String = 'month_cost';

        private var groundBackgroundImgSrc:String = "pl/znr/heatmaster/assets/images/backgrounds/background_grass.png";
        private var skyBackgroundImgSrc:String = "pl/znr/heatmaster/assets/images/backgrounds/background_sky.png";

        private var heatMasterListener:HeatMasterChangeListener = new HeatMasterChangeListener();
        private var heatMasterController:HeatMasterController = new HeatMasterController();
        private var environmentalDataPreparer:EnvironmentalDataPreparer = new EnvironmentalDataPreparer();
        private var cachedDataContextManager:CachedDataContextManager;
        private var heatMasterLocaleManager:HeatMasterLocaleManager;
        private var calculationStateController:CalculationStateController;
        private var businessConfigReader:BusinessConfigurationReader;

        private var stationsPanel:StationsPanel = new StationsPanel();
        private var balanceReportPanel:BalanceReportPanel;

        private var cachedData:StateDataContext;

        [Bindable]
        private var startButtonVisible:Boolean = true;

        [Bindable]
        private var plotVisible:Boolean = false;

        [Bindable]
        private var comparingPlotVisible = false;

        [Bindable]
        private var stationsPanelVisible:Boolean = false;

        private var runtimeCountriesXML:XML;
        private var runtimeStationsXML:XML;
        private var runtimeDictionaryXML:XML;

        private var localeToggled:Boolean = false;
        private var langChangeListeners:ArrayCollection = new ArrayCollection();
        private var configItems:ArrayCollection;
        private var businessConfig:BusinessConfiguration;

        private var selectedLang:String;

        public static function getInstance():HeatMaster {
            return FlexGlobals.topLevelApplication as HeatMaster;
        }

        public function goToHeatingPopupState():void {
            heatMasterContainer.removeElement(blurringImg);
            heatMasterContainer.addElement(blurringImg);
            heatMasterContainer.removeElement(heatingPopup);
            heatingPopup.rollDownStartupPopup();
            heatMasterContainer.addElement(heatingPopup);
        }

        public function goToNormalState():void {
            try {
                tryWriteCache();
                heatMasterContainer.removeElement(blurringImg);
            } catch (e:Error) {
                Alert.show("Error writing cache...", e.message);
            }
        }

        public function showStationsMap(stationsConfig:StationsConfig, selectedStation:StationItem):void {
            if (stationsPanel.visible) {
                stationsPanel.visible = false;
                stationsPanelVisible = false;
                this.removeElement(stationsPanel);
                return;
            }

            var bitmapImg:BitmapImage = new BitmapImage();
            bitmapImg.source = stationsConfig.mapImage;

            stationsPanel.setStations(stationsConfig.stations, selectedStation);
            stationsPanel.mapImage = stationsConfig.mapImage;
            this.addElement(stationsPanel);
            stationsPanel.visible = true;
            stationsPanelVisible = true;
        }

        public function groundBackgroundVisible(visible:Boolean):void {
            bgGrassImg.visible = visible;
            bgSkyImg.visible = !visible;
        }

        public function getHousePanel():HousePanel {
            return housePanel;
        }

        public function addToolTip(x:int, y:int, toolTipComp:UIComponent):void {
            toolTipComp.x = x;
            toolTipComp.y = y;
            addElement(toolTipComp);
        }

        public function showMonthlyReport():void {
            if (!plotVisible) {
                plotVisible = true;
                comparingPlotVisible = false;
            }
            partnersLogo.visible = false;
        }

        public function hideMonthlyReport():void {
            plotVisible = false;
            partnersLogo.visible = true;
        }

        public function hideMap():void {
            stationsPanel.visible = false;
            stationsPanelVisible = false;
            this.removeElement(stationsPanel);
            partnersLogo.visible = true;
        }

        public function showBalanceReport(calculationState:ComparingProcessingResult):void {
            plotVisible = false;
            comparingPlotPanel.drawComparingPlot(calculationState);
            comparingPlotVisible = true;
            partnersLogo.visible = false;
        }

        public function hideBalanceReport():void {
            /*balanceReportPanel.visible = false;
             heatMasterContainer.removeElement(balanceReportPanel);*/
            comparingPlotVisible = false;
            partnersLogo.visible = true;
        }

        public function showProperPopupsVisibility():void {
            heatingPopup.setPreviousVisibilityState();
        }

        private function initHeatMaster():void {
            trace("Initializing HeatMaster...");
            businessConfigReader = new BusinessConfigurationReader(countriesXML, stationsXML, dictionaryXML, resourceManager);

            stationsPanel = new StationsPanel();
            stationsPanel.x = Math.max(0, (this.width - stationsPanel.width) / 2);
            stationsPanel.y = 30;
            stationsPanel.visible = false;
            stationsPanel.setHeatMasterListener(heatMasterListener);

            balanceReportPanel = new BalanceReportPanel();
            balanceReportPanel.x = housePanel.x + 200;
            balanceReportPanel.y = 80;
            balanceReportPanel.visible = false;

            calculationStateController = new CalculationStateController(heatMasterController);
            cachedDataContextManager = new CachedDataContextManager(calculationStateController);
            calculationStateController.setCacheManager(cachedDataContextManager);
            heatMasterLocaleManager = new HeatMasterLocaleManager(resourceManager);
            businessConfigReader = new BusinessConfigurationReader(countriesXML, stationsXML, dictionaryXML, resourceManager);

            selectedLang = resourceManager.getLocales()[0];

        }

        private function httpServiceFault(evt:FaultEvent):void {
            var title:String = evt.type + " (" + evt.fault.faultCode + ")";
            var text:String = evt.fault.faultString;
            trace("Error: " + title + text);
        }

        private function httpServiceResult(xmlType:int, evt:ResultEvent):void {
            var xmlList:XML = XML(evt.result);
            if (xmlType == XMLType.COUNTRIES) {
                runtimeCountriesXML = xmlList;
            }
            else if (xmlType == XMLType.STATIONS) {
                runtimeStationsXML = xmlList;
            }
            else if (xmlType == XMLType.DICTIONARIES) {
                runtimeDictionaryXML = xmlList;
            }
            if(runtimeCountriesXML != null && runtimeStationsXML != null && runtimeDictionaryXML != null){
                businessConfigReader = new BusinessConfigurationReader( runtimeCountriesXML, runtimeStationsXML, runtimeDictionaryXML, resourceManager);
            }
        }

        private function setPolishComponentsVisibility(polishVisible:Boolean):void {
            plIntroLogoGroup.visible = polishVisible;
            enIntroLogoGroup.visible = !polishVisible;
        }

        private function getConfigItemCode(cachedData:DataContext):String {
            if (cachedData != null && cachedData.selectedCountryRegion != null) {
                return cachedData.selectedCountryRegion;
            }
            return CountryItemHelper.getInitialConfigItemCode();
        }

        private function preinitialize():void {
            registerClassAlias("pl.znr.heatmaster.core.model.InsolationData", InsolationData);
            registerClassAlias("pl.znr.heatmaster.core.model.EnvironmentalData", EnvironmentalData);
        }

        private function appInitialized():void {
            businessConfig = businessConfigReader.readBusinessConfiguration();
            configItems = businessConfig.countryItems;

            setUpHeatMasterListener();
            injectListenerAndStateController(heatMasterContainer, heatMasterListener, calculationStateController);
            setUpOtherListeners(heatMasterContainer, heatMasterListener);

            //propagate business configuration
            heatMasterController.propagateBusinessConfiguration(businessConfig);

            cachedData = cachedDataContextManager.readCache();

            var countryRegionCode:String = CountryItemHelper.getInitialConfigItemCode();
            var regionItem:RegionItem = CountryItemHelper.getRegionByCodeFromCountryList(configItems, countryRegionCode);
            var countryItem:CountryItem = regionItem != null ? regionItem.country : CountryItemHelper.getCountryByCode(configItems, countryRegionCode);

            housePanel.energyMeter.countryChanged(countryItem);
            housePanel.energyMeter.setCalculationStateController(calculationStateController);
            housePanel.energyMeter.setHeatMasterController(heatMasterController);
            comparingPlotPanel.setCalculationStateController(calculationStateController);

            startButtonVisible = cachedData == null;

            var language:String = cachedData != null ? cachedData.getCurrentDataContext().lang : null;
            if (language == null) {
                language = heatMasterLocaleManager.getLang();
            }
            selectedLang = language;
            setPolishComponentsVisibility(LangHelper.isPolishLang(language));
            resourceManager.localeChain = [language];
            initialPhaseNotifyLangChangeListeners(language);
            selectedLang = language;
        }

        private function setUpHeatMasterListener():void {
            heatMasterListener.setHeatMasterController(heatMasterController);
            heatMasterListener.setCalculationStateController(calculationStateController);
            heatMasterListener.setBusinessConfiguration(businessConfig);
            heatMasterListener.setCacheManager(cachedDataContextManager);
            heatMasterListener.setHousePanel(housePanel);
            heatMasterListener.setHeatingPopup(heatingPopup);
            heatMasterListener.setHousePopup(housePopup);
            heatMasterListener.setEnergyMeter(housePanel.energyMeter);
        }

        private function setUpOtherListeners(component:Object, hmListener:HeatMasterChangeListener):void {
            if (component is IBuildingAgeChangeListener) {
                hmListener.addBuildingChangeListener(component as IBuildingAgeChangeListener);
            }
            if (component is HouseStandardChangeListener) {
                hmListener.addHouseStandardChangeListener(component as HouseStandardChangeListener)
            }
            if (component is LangChangeListener) {
                langChangeListeners.addItem(component as LangChangeListener);
            }
            if (component is ICalculationStateListener) {
                calculationStateController.addCalculationStateListener(component as ICalculationStateListener);
            }
            if (component is IVisualElementContainer) {
                var visualElementContainer:IVisualElementContainer = component as IVisualElementContainer;
                for (var i:int = 0; i < visualElementContainer.numElements; i++) {
                    setUpOtherListeners(visualElementContainer.getElementAt(i), hmListener);
                }
            }
        }

        private function findAndAddBuildingAgeListeners(component:Object, hmListener:HeatMasterChangeListener):void {
            if (component is IBuildingAgeChangeListener) {
                hmListener.addBuildingChangeListener(component as IBuildingAgeChangeListener);
            }
            if (component is IVisualElementContainer) {
                var visualElementContainer:IVisualElementContainer = component as IVisualElementContainer;
                for (var i:int = 0; i < visualElementContainer.numElements; i++) {
                    findAndAddBuildingAgeListeners(visualElementContainer.getElementAt(i), hmListener);
                }
            }
        }

        private function setupLangChangeListeners(component:Object):void {
            if (component is LangChangeListener) {
                langChangeListeners.addItem(component as LangChangeListener);
            }
            if (component is IVisualElementContainer) {
                var visualElementContainer:IVisualElementContainer = component as IVisualElementContainer;
                for (var i:int = 0; i < visualElementContainer.numElements; i++) {
                    setupLangChangeListeners(visualElementContainer.getElementAt(i));
                }
            }
        }

        private function injectListenerAndStateController(component:Object, hmListener:HeatMasterChangeListener, calculationStateController:CalculationStateController):void {
            if (component is HeatMasterComponent) {
                var hmComponent:HeatMasterComponent = component as HeatMasterComponent;
                hmComponent.setHeatMasterListener(hmListener);
                hmComponent.setCalculationStateController(calculationStateController);
                heatMasterController.addDataContextListener(hmComponent);
                heatMasterController.addBusinessConfigurationListener(hmComponent);
            }
            if (component is HeatMasterResultComponent) {
                var hmResultComponent:HeatMasterResultComponent = component as HeatMasterResultComponent;
                heatMasterController.addResultDataListener(hmResultComponent);
            }
            if (component is IVisualElementContainer) {
                var visualElementContainer:IVisualElementContainer = component as IVisualElementContainer;
                for (var i:int = 0; i < visualElementContainer.numElements; i++) {
                    injectListenerAndStateController(visualElementContainer.getElementAt(i), hmListener, calculationStateController);
                }
            }
        }

        private function continueCalculation():void {
            setStartViewState();
            if (cachedData != null) {
                var currentDataContext:DataContext = cachedData.getCurrentDataContext();

                var regionItem:RegionItem = CountryItemHelper.getInitialOrCachedRegionItem(true, currentDataContext, configItems);
                var countryItem:CountryItem = regionItem != null ? regionItem.country : CountryItemHelper.getInitialOrCachedCountryItem(true, currentDataContext, configItems);

                heatingPopup.configChanged(countryItem, currentDataContext.localCurrency);
                housePanel.energyMeter.countryChanged(countryItem);

                if (cachedData.newDataContext != null && cachedData.referenceDataContext != null) {
                    calculationStateController.initStateController(cachedData);
                    heatMasterController.calculateAndSetViewReferenceState(cachedData);
                }
                else {
                    heatMasterController.calculateAndSetViewState(currentDataContext);
                }

                heatMasterContainer.removeElement(introGroup);
                heatMasterContainer.removeElement(housePopup);

                housePopup.setRolledBackState();
                heatingPopup.setRolledBackState();
                heatMasterContainer.removeElement(blurringImg);

                heatMasterContainer.addElement(housePopup);
                heatMasterListener.setCacheEnabled(true);
                heatMasterListener.languageChanged(selectedLang);
            }
            notifyLangChangeListeners(selectedLang);
        }

        private function newCalculation():void {
            setStartViewState();

            cachedDataContextManager.clearCache();
            cachedData = null;

            var initDataContext:DataContext = initDataContextWithConfig();

            initDataContext = heatMasterController.initData(initDataContext);
            if (initDataContext.houseData.standardType != null) {
                initDataContext = heatMasterListener.applyHouseStandardChanged(initDataContext, initDataContext.houseData.standardType);
            }

            heatMasterController.startCalculationWithConfig(initDataContext);

            heatMasterContainer.removeElement(introGroup);
            heatMasterContainer.removeElement(housePopup);
            housePopup.rollDownStartupPopup();
            heatMasterContainer.addElement(housePopup);

            heatMasterListener.languageChanged(selectedLang);
            notifyLangChangeListeners(selectedLang);
        }

        private function initDataContextWithConfig():DataContext {
            var regionItem:RegionItem = CountryItemHelper.getInitialOrCachedRegionItem(false, null, configItems);
            var countryItem:CountryItem = regionItem != null ? regionItem.country : CountryItemHelper.getInitialOrCachedCountryItem(false, null, configItems);

            var dataContext:DataContext = new DataContext();
            var envDataConfig:IEnvironmentalDataConfig = null;
            if (regionItem != null) {
                envDataConfig = regionItem;
            }
            else {
                envDataConfig = countryItem.stationsConfig != null && countryItem.stationsConfig.defaultStation != null ? countryItem.stationsConfig.defaultStation : countryItem;
            }
            dataContext.environmentalData = EnvironmentalDataPreparer.prepareFromConfig(new EnvironmentalData(), envDataConfig);
            dataContext.initialConfigItem = countryItem;
            dataContext.selectedCountryRegion = regionItem != null ? regionItem.code : countryItem.code;
            if (countryItem.stationsConfig != null) {
                dataContext.selectedStation = countryItem.stationsConfig.defaultStation.code;
            }

            return dataContext;
        }

        private function setStartViewState():void {
            bottomBarImg.visible = true;

            menuButtonGroup.visible = true;
            housePopup.visible = true;
            heatingPopup.visible = true;
            houseTopBarImg.visible = true;

            logoImagePl.visible = LangHelper.isPolishLang(selectedLang);
            logoImageEn.visible = !logoImagePl.visible;
        }

        private function tryWriteCache():void {
            var dataContext:DataContext = heatMasterController.getDataContext();
            if (dataContext != null) {
                cachedDataContextManager.writeCache(dataContext);
                heatMasterListener.setCacheEnabled(true);
            }
        }

        private function openManualPdf():void {
            var url:String = "http://ziemianarozdrozu.pl/dl/heatmaster/HeatMaster-Manual-PL.pdf";
            navigateToURL(new URLRequest(url), "_blank");
        }

        private function openTechPdf():void {
            var url:String = "http://ziemianarozdrozu.pl/dl/heatmaster/HeatMaster-Tech-PL.pdf";
            navigateToURL(new URLRequest(url), "_blank");
        }

        private function openAboutPdfFile():void {
            var url:String = "http://ziemianarozdrozu.pl/dl/heatmaster/HeatMaster-Team-PL.pdf";
            navigateToURL(new URLRequest(url), "_blank");
        }


        private function getIconsOffset():int {
            if (this.width <= 1154) {
                return Math.max(12, 16 * this.width / 1280)
            }
            return Math.min(20, Math.max(0, (this.width - 1024) / 256 * 20));
        }

        private function getReportIconOffset():int {
            return Math.min(20, Math.max(0, (this.width - 1024) / 256 * 20));
        }

        private function clearCache():void {
            cachedDataContextManager.clearCache();
        }

        private function getLogoWidth():Number {
            return this.width < 1280 ? 120 : 200;
        }

        private function getLogoHeight():Number {
            return this.width < 1280 ? 46 * 0.6 : 46;
        }

        private function toggleLocale():void {
            localeToggled = !localeToggled;
            selectedLang = localeToggled ? LangHelper.US_LANG_CODE : LangHelper.PL_LANG_CODE;
            resourceManager.localeChain = localeToggled ? [selectedLang] : [selectedLang];
            this.dispatchEvent(new Event("langChange"));
            notifyLangChangeListeners(selectedLang);
            heatMasterListener.languageChanged(selectedLang);
        }

        private function notifyLangChangeListeners(lang:String):void {
            trace("Notifying lang change listeners: " + lang);
            if (lang != null) {
                for (var i:int = 0; i < langChangeListeners.length; i++) {
                    var langChangeListener:LangChangeListener = langChangeListeners.getItemAt(i) as LangChangeListener;
                    langChangeListener.langChanged(lang);
                }
            }
        }

        private function initialPhaseNotifyLangChangeListeners(lang:String):void {
            if (lang != null) {
                for (var i:int = 0; i < langChangeListeners.length; i++) {
                    var langChangeListener:LangChangeListener = langChangeListeners.getItemAt(i) as LangChangeListener;
                    langChangeListener.initialLangChanged(lang);
                }
            }
        }

        private function setEnglishLang():void {
            selectedLang = "en_US";
            setPolishComponentsVisibility(false);
            resourceManager.localeChain = ["en_US"];
            initialPhaseNotifyLangChangeListeners(selectedLang);
        }

        private function setPolishLang():void {
            selectedLang = "pl_PL";
            setPolishComponentsVisibility(true);
            resourceManager.localeChain = ["pl_PL"];
            initialPhaseNotifyLangChangeListeners(selectedLang);
        }
        ]]></fx:Script>


    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";

        s|DropDownList {
            fontSize: 10;
            fontWeight: bold;
            color: gray;
        }

        .popupPanelLabelOrangeStyle {
            fontSize: 12px;
            color: #FF6600;
            verticalAlign: middle;
            fontWeight: bold;
        }

        .popupPanelHeader {
            fontSize: 13px;
            color: #FF6600;
            verticalAlign: middle;
            fontWeight: bold;
        }

        .baloonHeader {
            fontSize: 12px;
            verticalAlign: middle;
            fontWeight: bold;
            color: #333333;
        }

        .pupupPanelGrayFontStyle {
            fontSize: 11px;
            color: #333333;
            fontWeight: normal;
        }

        .smallPupupPanelGrayFontStyle {
            fontSize: 11px;
            color: gray;
            fontWeight: bold;
        }

        .checkBoxStyle {
            borderColor: #FF6600;
        }

        .arrowLabelStyle {
            color: #FF6600;
            fontSize: 15px;
            fontWeight: bold;
            textAlign: center;
            verticalAlign: middle;
        }

        .verticalAxisStyle {
            color: blue;
            fontSize: 11px;
            fontWeight: bold;
            textAlign: right;
        }

        .reportBlackLabel {
            fontSize: 12px;
            fontWeight: bold;
            color: black;
        }

        .reportDarkGrayLabel {
            fontSize: 12px;
            fontWeight: bold;
            color: #a9a9a9;
        }

        .reportGrayLabel {
            fontSize: 12px;
            fontWeight: bold;
            color: gray;
        }

        .reportLegendVerticalLabel {
            fontSize: 12px;
            fontWeight: bold;
            color: black;
            verticalAlign: middle;
        }

        .monthLegendStyle {
            fontSize: 12px;
            fontWeight: bold;
            color: black;
        }

        .monthLegendValueStyle {
            fontSize: 11px;
            fontWeight: bold;
            color: red;
        }

        .labelStyle {
            fontSize: 12px;
            color: black;
            fontWeight: bold;
        }


    </fx:Style>

    <s:Scroller id="scroller" width="100%">
        <s:Group>
            <s:BorderContainer x="0" id="heatMasterContainer" width="{Math.max(1000,this.width * 0.9)}" height="765"
                               borderWeight="0">

                <mx:Image id="bgGrassImg" width="{Math.max(1024,this.width )}" height="715" visible="true"
                          maintainAspectRatio="false"
                          source="@Embed('/pl/znr/heatmaster/assets/images/backgrounds/background_grass.png')"/>
                <mx:Image id="bgSkyImg" width="{Math.max(1024,this.width )}" height="715" visible="false"
                          maintainAspectRatio="false"
                          source="@Embed('/pl/znr/heatmaster/assets/images/backgrounds/background_sky.png')"/>

                <mx:Image width="{Math.max(1024,this.width )}" height="47" maintainAspectRatio="false" x="0" y="0"
                          id="houseTopBarImg"
                          source="@Embed('/pl/znr/heatmaster/assets/images/top_bar.png')" visible="false"/>

                <mx:Image id="logoImagePl" x="{Math.max(0,this.width - 1000)/2}" y="0" source="@Embed('/pl/znr/heatmaster/assets/images/logo/polreff/logo_bar_pl.png')"
                          visible="false"/>
                <mx:Image id="logoImageEn" x="{Math.max(0,this.width - 1000)/2}" y="0" source="@Embed('/pl/znr/heatmaster/assets/images/logo/polreff/logo_bar_en.png')"
                          visible="false"/>

                <panel:HousePanel x="{Math.max(0,this.width - 1000)/2}" id="housePanel" width="1000" height="715"
                                  visible="{!plotVisible &amp;&amp; !comparingPlotVisible}"/>

                <mx:Image id="partnersLogo" x="{housePanel.x + housePanel.width - 220}" y="75" source="@Embed('/pl/znr/heatmaster/assets/images/logo/polreff/loga_partnerzy.png')"/>

                <panel:PlotPanel x="{Math.max(0,(this.width - plotPanel.width)/2)}" maxWidth="1200" y="90"
                                 height="560"
                                 width="{Math.min(Math.max(1000 * 1200/1280,1200/1280 * this.width),1200)}"
                                 id="plotPanel" visible="{plotVisible}" />

                <panel:ComparingPlotPanel x="{Math.max(0,(this.width - comparingPlotPanel.width)/2)}" maxWidth="{0.8 * 1200}" y="90"
                                 height="560"
                                 width="{Math.min(Math.max(0.8 * 1000 * 1200/1280,1200/1280 * 0.8 * this.width),0.8 * 1200)}"
                                 id="comparingPlotPanel" visible="{comparingPlotVisible}" />


                <popup:HousePopup id="housePopup" y="18" x="{housePanel.x + 200}" height="400" visible="false"/>
                <popup:HeatingPopup id="heatingPopup" y="18" x="{housePopup.x + housePopup.width}" visible="false"/>


                <s:Group id="menuButtonGroup" y="0" x="{heatingPopup.x + heatingPopup.width + getReportIconOffset()}"
                         visible="false">
                    <hmbtn:ImageSkinnableButton id="helpBtn" x="0" y="10"
                               toolTip="{resourceManager.getString('hm','hm.tooltip.button.manual')}"
                               width="{Math.min(27 * this.width/1280,27)}" maxWidth="27" minWidth="21"
                               height="{Math.min(28 * this.width/1280,28)}" maxHeight="28" minHeight="21"
                               upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/help_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/help_icon.png')"
                               overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/help_icon_over.png')"
                               buttonMode="true" visible="true" click="this.openManualPdf()">
                    </hmbtn:ImageSkinnableButton>

                    <hmbtn:ImageSkinnableButton id="techBtn" x="{helpBtn.x + helpBtn.width + getIconsOffset()}" y="10"
                               toolTip="{resourceManager.getString('hm','hm.tooltip.button.how_to')}"
                               width="{Math.min(27 * this.width/1280,27)}" maxWidth="27" minWidth="21"
                               height="{Math.min(28 * this.width/1280,28)}" maxHeight="28" minHeight="21"
                               upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/maths_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/maths_icon.png')"
                               overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/maths_icon_over.png')"
                               buttonMode="true" visible="true" click="this.openTechPdf()">
                    </hmbtn:ImageSkinnableButton>

                    <hmbtn:ImageSkinnableButton id="aboutBtn" x="{techBtn.x + techBtn.width + getIconsOffset()}" y="10"
                               toolTip="{resourceManager.getString('hm','hm.tooltip.button.about')}"
                               width="{Math.min(27 * this.width/1280,27)}" maxWidth="27" minWidth="21"
                               height="{Math.min(28 * this.width/1280,28)}" maxHeight="28" minHeight="21"
                               upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/us_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/us_icon.png')"
                               overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/us_icon_over.png')"
                               buttonMode="true" visible="true" click="this.openAboutPdfFile()">
                    </hmbtn:ImageSkinnableButton>
                </s:Group>


                <mx:Image id="blurringImg" x="0" y="0" height="100%" width="100%" maintainAspectRatio="false"
                          source="@Embed('/pl/znr/heatmaster/assets/images/start/przyciemniacz_start.png')"/>
                <s:Group x="0" y="0" id="introGroup" width="100%" height="100%">

                    <s:Group y="150" x="{introGroup.width/2 - introContentGroup.width/2}" width="613" height="600"
                             id="introContentGroup">

                        <s:Group id="startBtnContainer" width="100%" height="241" y="55">

                            <s:Image x="0" y="0" id="imgBckgStart"
                                     source="@Embed('/pl/znr/heatmaster/assets/images/start/bkg_start1.png')"/>


                            <hmbtn:ImageSkinnableButton y="6" right="45" buttonMode="true" id="polishFlagBtn"
                                                        upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/PL_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/PL_icon.png')"
                                                        overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/PL_icon_over.png')" click="this.setPolishLang()">
                            </hmbtn:ImageSkinnableButton>

                            <hmbtn:ImageSkinnableButton y="6" right="15" buttonMode="true" id="englishFlagBtn"
                                                        upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/EN_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/EN_icon.png')"
                                                        overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/EN_icon_over.png')" click="this.setEnglishLang()">
                            </hmbtn:ImageSkinnableButton>

                            <s:RichEditableText x="{(imgBckgStart.width - introText.width)/2 + 20}" y="32" id="introText" editable="false"
                                                focusEnabled="false" selectable="false" width="560"
                                                textAlign="left" verticalAlign="middle" fontSize="15" fontWeight="bold">
                                <s:textFlow>
                                    {TextFlowUtil.importFromString(resourceManager.getString('hm','hm.label.main.title'))}
                                </s:textFlow>
                            </s:RichEditableText>


                            <mx:Button id="startBtn" left="{startBtnContainer.width/2 - 95}"
                                       visible="{startButtonVisible}" y="{startBtnContainer.height * 0.8}"
                                       skin="@Embed('/pl/znr/heatmaster/assets/images/start/blank_button.png')"
                                       buttonMode="true" label="START" color="white" fontSize="15" fontWeight="bold"
                                       textRollOverColor="gray">
                                <mx:click><![CDATA[
                                        this.newCalculation()
                                    ]]></mx:click>
                            </mx:Button>

                            <s:HGroup horizontalAlign="center" verticalAlign="middle" y="{startBtn.y}" x="{introText.x}"
                                      width="{introContentGroup.width * 0.9}" visible="{!startButtonVisible}">

                                <mx:Button id="continueBtn"
                                           skin="@Embed('/pl/znr/heatmaster/assets/images/start/blank_button.png')"
                                           buttonMode="true"
                                           label="{resourceManager.getString('hm','hm.button.continue')}" color="white"
                                           fontSize="15"
                                           fontWeight="bold" textRollOverColor="gray">
                                    <mx:click><![CDATA[
                                            this.continueCalculation()
                                        ]]></mx:click>
                                </mx:Button>

                                <mx:Button id="newCalcBtn"
                                           skin="@Embed('/pl/znr/heatmaster/assets/images/start/blank_button.png')"
                                           buttonMode="true"
                                           label="{resourceManager.getString('hm','hm.button.new_calc')}" color="white"
                                           fontSize="15"
                                           fontWeight="bold" textRollOverColor="gray">
                                    <mx:click><![CDATA[
                                            this.newCalculation()
                                        ]]></mx:click>
                                </mx:Button>
                            </s:HGroup>
                        </s:Group>

                        <s:Group width="100%" y="0" id="plIntroLogoGroup" visible="false">
                            <s:layout>
                                <s:HorizontalLayout/>
                            </s:layout>
                            <s:Spacer width="100%"/>
                            <s:Image source="@Embed('/pl/znr/heatmaster/assets/images/logo/polreff/logo_main_pl.png')"/>
                            <s:Spacer width="100%"/>
                        </s:Group>

                        <s:Group width="100%" y="0" id="enIntroLogoGroup" visible="false">
                            <s:layout>
                                <s:HorizontalLayout/>
                            </s:layout>
                            <s:Spacer width="100%"/>
                            <s:Image source="@Embed('/pl/znr/heatmaster/assets/images/logo/polreff/logo_main_en.png')"/>
                            <s:Spacer width="100%"/>
                        </s:Group>

                    </s:Group>
                </s:Group>

                <s:Label id="versionText" text="{resourceManager.getString('hm','hm.label.version')}" left="5"
                         bottom="55" fontSize="9" color="white" click="toggleLocale()"/>

            </s:BorderContainer>
        </s:Group>
    </s:Scroller>

    <mx:Image maintainAspectRatio="false" id="bottomBarImg" left="0" right="0" y="715" visible="true"
              height="{Math.max(this.height - 715,0)}"
              source="@Embed('/pl/znr/heatmaster/assets/images/bottom_bar.png')"/>
</s:Application>
