<?xml version="1.0"?>
<hm:HeatMasterResultComponent xmlns:fx="http://ns.adobe.com/mxml/2009"
                              xmlns:s="library://ns.adobe.com/flex/spark"
                              xmlns:mx="library://ns.adobe.com/flex/mx"
                              xmlns:hm="pl.znr.heatmaster.ui.components.*"
                              xmlns:hmbtn="pl.znr.heatmaster.ui.components.button.*"
                              creationComplete="energyMeterInitialized()">
    <!-- To change this template use File | Settings | File Templates. -->

    <fx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.formatters.NumberBaseRoundType;
        import mx.formatters.NumberFormatter;
        import mx.utils.StringUtil;

        import pl.znr.heatmaster.HeatMaster;
        import pl.znr.heatmaster.config.CountryItem;
        import pl.znr.heatmaster.config.CountryItemHelper;
        import pl.znr.heatmaster.config.HeatMasterConfigurationReader;
        import pl.znr.heatmaster.constants.GlobalValues;
        import pl.znr.heatmaster.constants.StateConstants;
        import pl.znr.heatmaster.constants.combo.ConversionUnits;
        import pl.znr.heatmaster.core.DataContext;
        import pl.znr.heatmaster.core.HeatMasterController;
        import pl.znr.heatmaster.core.ProcessingResult;
        import pl.znr.heatmaster.core.StateDataContext;
        import pl.znr.heatmaster.core.calc.util.BalanceValueHelper;
        import pl.znr.heatmaster.core.comparator.ComparatorResult;
        import pl.znr.heatmaster.core.comparator.ProcessingResultComparator;
        import pl.znr.heatmaster.core.converter.ConversionData;
        import pl.znr.heatmaster.core.converter.ConvertedResult;
        import pl.znr.heatmaster.core.converter.ConverterHelper;
        import pl.znr.heatmaster.core.model.EnvironmentalData;
        import pl.znr.heatmaster.core.state.ComparingProcessingResult;
        import pl.znr.heatmaster.core.state.CalculationStateController;
        import pl.znr.heatmaster.core.HeatMasterChangeListener;
        import pl.znr.heatmaster.ui.builder.prepare.EnvironmentalDataPreparer;
        import pl.znr.heatmaster.ui.components.tooltip.EnergyMeterToolTip;

        private var configuratioReader:HeatMasterConfigurationReader;
        private var heatMasterController:HeatMasterController;
        private var environmentalData:EnvironmentalData;


        [Bindable]
        private var selectedMonth:int = 0;

        private var calculatedValue:Number;

        [Bindable]
        private var formattedReferenceValue:String;

        [Bindable]
        private var formattedNewValue:String;

        private var unit:int;
        private var value:Number = NaN;
        private var selectedCountry:CountryItem;

        private var refProcessingResult:ProcessingResult;
        private var newProcessingResult:ProcessingResult;

        override public function langChanged(lang:String):void {
            doLangChanged(false);
        }

        override public function initialLangChanged(lang:String):void {
            doLangChanged(true);
        }

        override public function initData(dataContext:DataContext):DataContext {
            environmentalData = dataContext.environmentalData;
            tempSE.value = dataContext.environmentalData.temperatures[monthDropDownList.selectedIndex];

            var conversionData:ConversionData = dataContext.conversionData;
            conversionData.selectedUnit = unitDropDownList.selectedItem.data;
            conversionData.unitName = unitDropDownList.selectedItem.labelUnit;
            conversionData.shortUnitName = getShortUnitNameCode(unitDropDownList.selectedItem.data, unitDropDownList.selectedItem.shortUnit);
            conversionData.toPLNCurrencyExchangeRate = ConverterHelper.calcToPLNExchangeRate(conversionData.selectedUnit, configuratioReader.getEuroToPLNExchangeRate(), dataContext.initialConfigItem.currencyExchangeRate);

            dataContext.currencyLocaleCode = ConversionUnits.isLocalCurrencyCostUnit(unitDropDownList.selectedItem.data) ? dataContext.initialConfigItem.currencyLocaleCode : HeatMaster.CURRENCY_EURO_LOCALE_CODE;
            dataContext.localCurrency = CountryItemHelper.isInitialLocalCurrencySet();

            setMonthComponentsVisibility(unitDropDownList.selectedItem.data);

            return dataContext;
        }

        override public function setupView(dataContext:DataContext):void {
            var conversionData:ConversionData = dataContext.conversionData;
            setMonthComponentsVisibility(conversionData.selectedUnit);
            if (ConversionUnits.isMonthUnit(conversionData.selectedUnit)) {
                monthDropDownList.selectedIndex = dataContext.selectedMonth;
            }

            var unitIdx:int = getComboItemIndexForCollection(conversionData.selectedUnit, unitList);
            if (unitIdx != -1) {
                unitDropDownList.selectedIndex = unitIdx;
            }

            environmentalData = dataContext.environmentalData;
            tempSE.value = environmentalData.temperatures[monthDropDownList.selectedIndex];
        }


        override public function setupReferenceView(stateDataContext:StateDataContext):void {
            var currentDataContext:DataContext = stateDataContext.getCurrentDataContext();
            var prevDataContext:DataContext = stateDataContext.getPreviousDataContext();

            setupView(currentDataContext);

            if (stateDataContext.newDataContext != null) {
                var prevProcessingResult:ProcessingResult = heatMasterController.calculateStateless(prevDataContext);
                var prevValue:Number = BalanceValueHelper.calcEfficiencyAwareYearBalanceValue(prevProcessingResult);
                setCalculatedValue(prevValue, prevProcessingResult.conversionData.selectedUnit, prevDataContext.currencyLocaleCode, true);

                if (calculationStateController.isInNewState()) {
                    refProcessingResult = prevProcessingResult;
                    initNewStateView();
                }
                else {
                    newProcessingResult = prevProcessingResult;
                    initReferenceStateView();
                }
            }
        }

        override public function comparingResultCalculated(comparingResult:ComparingProcessingResult, month:int):void {
            refProcessingResult = comparingResult.refProcessingResult;
            newProcessingResult = comparingResult.newProcessingResult;
            formattedReferenceValue = createFormattedValue(getProperValue(refProcessingResult,month), refProcessingResult.conversionData.selectedUnit, refProcessingResult.dataContext.currencyLocaleCode);
            formattedNewValue = createFormattedValue(getProperValue(newProcessingResult,month),newProcessingResult.conversionData.selectedUnit, newProcessingResult.dataContext.currencyLocaleCode);
        }

        override public function resultCalculated(resultData:ProcessingResult, month:int):void {
            unit = resultData.conversionData.selectedUnit;
            value = getProperValue(resultData,month);

            if (calculationStateController.isInReferenceOrInitialState()) {
                refProcessingResult = resultData;
            }
            else {
                newProcessingResult = resultData;
            }

            setCalculatedValue(value, unit, resultData.dataContext.currencyLocaleCode);
        }

        public function countryChanged(country:CountryItem):void {
            this.selectedCountry = country;
            var currencyName:String = resourceManager.getString('hm', country.currencyLocaleCode);

            trace("EnergyMeter currency name: " + currencyName);

            setUnitNames(currencyName);
        }

        public function environmentalDataChanged(envData:EnvironmentalData):void {
            this.environmentalData = envData;
            tempSE.value = environmentalData.temperatures[monthDropDownList.selectedIndex];
        }

        public function setCalculatedValue(value:Number, unit:int, currencyLocaleCode:String, previousMode:Boolean = false):void {
            this.calculatedValue = value;
            if (calculationStateController.isInReferenceOrInitialState()) {
                if (!previousMode) {
                    formattedReferenceValue = createFormattedValue(value, unit, currencyLocaleCode);
                }
                else {
                    formattedNewValue = createFormattedValue(value, unit, currencyLocaleCode);
                }
            }
            else {
                if (!previousMode) {
                    formattedNewValue = createFormattedValue(value, unit, currencyLocaleCode);
                }
                else {
                    formattedReferenceValue = createFormattedValue(value, unit, currencyLocaleCode);
                }
            }
        }

        public function setConfigurationReader(confReader:HeatMasterConfigurationReader):void {
            this.configuratioReader = confReader;
        }

        override public function setHeatMasterListener(heatMasterListener:HeatMasterChangeListener):void {
            super.setHeatMasterListener(heatMasterListener);
        }

        public function setHeatMasterController(heatMasterController:HeatMasterController):void {
            this.heatMasterController = heatMasterController;
        }

        private function getProperValue(resultData:ProcessingResult,month:int):Number {
            if (ConversionUnits.isYearUnit(resultData.conversionData.selectedUnit)) {
                return BalanceValueHelper.calcEfficiencyAwareYearBalanceValue(resultData);
            }
            else {
                var convertedResult:ConvertedResult = resultData.monthlyConvertedData[month];
                return convertedResult.getEfficiencyAwareBalanceValue();
            }
        }

        private function showBalanceReport():void {
            // var comparatorResult:ComparatorResult = new ProcessingResultComparator().compare(refProcessingResult, newProcessingResult);
            HeatMaster.getInstance().showBalanceReport(new ComparingProcessingResult(refProcessingResult, newProcessingResult));
        }

        private function freezeReferenceState():void {
            initNewStateView();

            formattedNewValue = formattedReferenceValue.substr(0);
            newProcessingResult = refProcessingResult;

            calculationStateController.freezeReferenceState();
        }

        private function switchToNewState():void {
            switchToNewStateView();
            calculationStateController.switchToNewState();
            HeatMaster.getInstance().showProperPopupsVisibility();
        }

        private function switchToReferenceState():void {
            switchToReferenceStateView();
            calculationStateController.switchToReferenceState();
            HeatMaster.getInstance().showProperPopupsVisibility();
        }

        private function initReferenceStateView():void {
            showReferenceStateComponents();
            switchToReferenceStateView();
        }

        private function initNewStateView():void {
            showReferenceStateComponents();
            switchToNewStateView();
        }

        private function switchToReferenceStateView():void {
            switchToRefStateButton.isKeyDown = true;
            switchToNewStateButton.isKeyDown = false;
        }

        private function switchToNewStateView():void {
            switchToRefStateButton.isKeyDown = false;
            switchToNewStateButton.isKeyDown = true;
        }

        private function showReferenceStateComponents():void {
            freezeStateButton.visible = false;
            switchToRefStateButton.visible = true;
            switchToNewStateButton.visible = true;
            reportCompareButton.visible = true;
            newValueLabel.visible = true;
        }

        private function unitUIChanged():void {
            try {
                var selectedItem:Object = unitDropDownList.selectedItem;
                setMonthComponentsVisibility(selectedItem.data);

                var newUnit:int = selectedItem.data;
                var shortUnitNameCode:String = getShortUnitNameCode(newUnit, selectedItem.shortUnit);

                if (!calculationStateController.isInInitialState()) {
                    var dataContext:DataContext = calculationStateController.getPreviousDataContext();
                    var previousState:int = calculationStateController.getPreviousState()
                    dataContext = heatMasterListener.applyConversionChangesToDataContext(previousState, dataContext, newUnit, selectedItem.labelUnit, shortUnitNameCode);
                    var processingResult:ProcessingResult = calculationStateController.isInReferenceOrInitialState() ? newProcessingResult : refProcessingResult;
                    processingResult = heatMasterController.convertResult(processingResult, dataContext.conversionData);
                    setCalculatedValue(BalanceValueHelper.calcEfficiencyAwareYearBalanceValue(processingResult), newUnit, dataContext.currencyLocaleCode, true);
                }

                heatMasterListener.unitChanged(newUnit, selectedItem.labelUnit, shortUnitNameCode);
            } catch (e:Error) {
                Alert.show("Unit changed error " + e.message);
            }
        }

        private function getShortUnitNameCode(unit:int, shortUnitNameCode:String):String {
            var result:String = shortUnitNameCode;
            if (ConversionUnits.isLocalCurrencyCostUnit(unit)) {
                result = selectedCountry.currencyLocaleCode + ".";
                result += ConversionUnits.isYearUnit(unit) ? HeatMaster.YEAR_COST_SUFFIX_CODE : HeatMaster.MONTH_COST_SUFFIX_CODE;
            }
            return result;
        }

        private function tempChanged():void {
            environmentalData.temperatures[monthDropDownList.selectedIndex] = tempSE.value;
            environmentalData = EnvironmentalDataPreparer.applyTemperatureStats(environmentalData);
            heatMasterListener.environmentalDataChanged(environmentalData);
        }

        private function monthChanged():void {
            try {
                tempSE.value = environmentalData.temperatures[monthDropDownList.selectedIndex];
                heatMasterListener.monthChanged(monthDropDownList.selectedIndex);
                // Alert.show("Month changed.. " + tempSE.value);
            } catch (e:Error) {
                Alert.show("Error month chnaged " + e.message);
            }
        }

        private function createFormattedValue(value:Number, unit:int, currencyLocaleCode:String):String {
            var format:NumberFormatter = new NumberFormatter();
            format.precision = 0;
            format.rounding = NumberBaseRoundType.NEAREST;
            format.thousandsSeparatorFrom = " ";
            format.thousandsSeparatorTo = " ";

            var unitCode:String = getUnitName(currencyLocaleCode);
            var unitName:String = "";
            if (ConversionUnits.isEmisionUnit(unit)) {
                unitName = "CO2 "
            }
            if (value >= 10000000 && ConversionUnits.isEmisionUnit(unit)) {
                value = value / 1000;
                unitCode = "hm.unit.tonne.year";
            }

            unitName += resourceManager.getString('hm', unitCode);

            return format.format(value) + " " + unitName;
        }

        private function getUnitName(currencyLocaleCode:String):String {
            if (!ConversionUnits.isLocalCurrencyCostUnit(unitDropDownList.selectedItem.data)) {
                return unitDropDownList.selectedItem.shortUnit;
            }
            else {
                var shortUnitName:String = currencyLocaleCode + ".";
                shortUnitName += ConversionUnits.isYearUnit(unitDropDownList.selectedItem.data) ? 'year_cost' : 'month_cost';
                return shortUnitName;
            }
        }

        private function doLangChanged(initial:Boolean):void {
            var oldIdx:int = monthDropDownList.selectedIndex;
            monthList.refresh();
            monthDropDownList.selectedIndex = oldIdx;

            if (selectedCountry != null) {
                var currencyName:String = resourceManager.getString('hm', selectedCountry.currencyLocaleCode);
                setUnitNames(currencyName);
            }

            if (!initial) {
                var currencyLocaleCode:String = heatMasterListener.getDataContext().currencyLocaleCode;
                setCalculatedValue(value, unit, currencyLocaleCode);
            }
            else {
                formattedReferenceValue = resourceManager.getString('hm', 'hm.labels.energy');
            }
        }

        private function setMonthComponentsVisibility(conversionUnit:int):void {
            monthGroup.visible = !ConversionUnits.isYearUnit(conversionUnit);
            hRule.visible = !ConversionUnits.isYearUnit(conversionUnit);
        }

        private function openInfoPanel(evt:MouseEvent):void {
            var toolTip:EnergyMeterToolTip = new EnergyMeterToolTip();
            var x:int = evt.stageX - 20;
            var y:int = evt.stageY;
            HeatMaster.getInstance().addToolTip(x, y, toolTip);
        }

        private function energyMeterInitialized():void {
            formattedReferenceValue = resourceManager.getString('hm', 'hm.labels.energy');
        }

        private function setUnitNames(currencyName:String):void {
            trace("Setting unit names: " + currencyName)
            for each (var obj:Object in unitList) {
                var unit:int = obj.data;
                if (ConversionUnits.isLocalCurrencyCostUnit(unit)) {
                    obj.name = StringUtil.substitute(resourceManager.getString('hm', obj.localeCode), currencyName);
                }
                else {
                    obj.name = resourceManager.getString('hm', obj.localeCode);
                }
            }

            var oldIdx:int = unitDropDownList.selectedIndex;
            unitList.refresh();
            unitDropDownList.selectedIndex = oldIdx;
        }

        private function showMonthlyReport():void {
            HeatMaster.getInstance().showMonthlyReport();
        }
        ]]></fx:Script>

    <fx:Declarations>


        <s:ArrayCollection id="unitList">
            <!--<fx:Object name="" localeCode = "hm.dropdown.heat_loss.watts" data="{ConversionUnits.ENERGY_WATTS}" labelUnit="Waty" shortUnit="hm.unit.watts"/>-->
            <fx:Object name="" localeCode = "hm.dropdown.energy.consumption.kwh.year" data="{ConversionUnits.ENERGY_KWH_PER_YEAR}" labelUnit="kWh/rok" shortUnit="hm.unit.kwh.year" rawUnit="hm.unit.kwh"/>
            <fx:Object name="" localeCode = "hm.dropdown.energy.consumption.gj.year" data="{ConversionUnits.ENERGY_GJ_PER_YEAR}" labelUnit="GJ/rok" shortUnit="hm.unit.gj.year"/>
            <!--<fx:Object name="" localeCode = "hm.dropdown.energy.consumption.kwh.month" data="{ConversionUnits.ENERGY_KWH_PER_MONTH}" labelUnit="kWh/mc" shortUnit="hm.unit.kwh.month"/>-->
            <!--<fx:Object name="" localeCode = "hm.dropdown.energy.consumption.gj.month" data="{ConversionUnits.ENERGY_GJ_PER_MONTH}" labelUnit="GJ/mc" shortUnit="hm.unit.gj.month"/>-->
            <fx:Object name="" localeCode = "hm.dropdown.emission.year" data="{ConversionUnits.EMISSIONS_PER_YEAR}" labelUnit="CO2 kg/rok" shortUnit="hm.unit.kg.year"/>
            <fx:Object name="" localeCode = "hm.dropdown.energy.cost.year" data="{ConversionUnits.COST_PER_YEAR}" labelUnit="zł/rok" shortUnit="hm.currency.euro.year_cost"/>
            <fx:Object name="" localeCode = "hm.dropdown.energy.cost.local-currency.year" data="{ConversionUnits.LOCAL_CURRENCY_COTS_PER_YEAR}" labelUnit="zł/rok" shortUnit="hm.currency.euro.year_cost"/>
            <!--<fx:Object name="" localeCode = "hm.dropdown.energy.cost.month" data="{ConversionUnits.COST_PER_MONTH}" labelUnit="zł/mc" shortUnit="hm.currency.euro.month_cost"/>-->
            <!--<fx:Object name="" localeCode = "hm.dropdown.energy.cost.local-currency.month" data="{ConversionUnits.LOCAL_CURRENCY_COST_PER_MONTH}" labelUnit="zł/mc" shortUnit="hm.currency.euro.month_cost"/>-->
        </s:ArrayCollection>

        <s:ArrayCollection id="monthList">
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_1')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_2')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_3')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_4')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_5')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_6')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_7')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_8')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_9')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_10')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_11')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_12')}</fx:String>
        </s:ArrayCollection>
    </fx:Declarations>


    <s:Image x="0" y="0" source="@Embed('/pl/znr/heatmaster/assets/images/counter/counter-button.png')"/>
    <s:DropDownList x="24" y="18" width="155" id="unitDropDownList" dataProvider="{unitList}" labelField="name" selectedIndex="4" change="unitUIChanged()"
                    fontSize="10" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>

    <mx:Button id="showMonthlyReportButton" x="{unitDropDownList.x + unitDropDownList.width + 3}" y="{unitDropDownList.y}" click="showMonthlyReport()"
               skin="@Embed('/pl/znr/heatmaster/assets/images/counter/report_button.png')"
               overSkin="@Embed('/pl/znr/heatmaster/assets/images/counter/report_button_over.png')"
               toolTip="{resourceManager.getString('hm','hm.tooltip.button.report')}"/>

    <mx:Button id="reportCompareButton" x="{unitDropDownList.x + unitDropDownList.width + 3}" y="40" click="showBalanceReport()" visible="false"
               skin="@Embed('/pl/znr/heatmaster/assets/images/counter/report_compare_button.png')"
               overSkin="@Embed('/pl/znr/heatmaster/assets/images/counter/report_compare_button_over.png')"
               toolTip="{resourceManager.getString('hm','hm.tooltip.button.report-compare')}"/>


    <s:Label id="refValueLabel" x="10" y="44"  width="138" text="{formattedReferenceValue}" styleName="popupPanelHeader" fontSize="16" textAlign="right" verticalAlign="middle"/>
    <hmbtn:KeepDownStateButton id="switchToRefStateButton" visible="false" y="40" x="{unitDropDownList.x + unitDropDownList.width - 20}" width="20" click="switchToReferenceState()"
            skinClass="pl.znr.heatmaster.ui.components.button.KeepDownStateButtonSkin" toolTip="{resourceManager.getString('hm','hm.tooltip.button.switch-reference')}"/>

    <s:Label x="10" y="64" id="newValueLabel" visible="false" width="138" text="{formattedNewValue}" styleName="popupPanelHeader" color="yellow" fontSize="16" textAlign="right" verticalAlign="middle"/>
    <hmbtn:KeepDownStateButton id="switchToNewStateButton" visible="false" y="60" x="{unitDropDownList.x + unitDropDownList.width - 20}" width="20" click="switchToNewState()"
                               skinClass="pl.znr.heatmaster.ui.components.button.KeepDownStateButtonSkin" toolTip="{resourceManager.getString('hm','hm.tooltip.button.switch-new')}"/>





    <mx:HRule id="hRule" x="28" y="64" width="151" height="1" />

    <s:Group x="0" y="71" id="monthGroup" visible="false">
        <s:DropDownList id="monthDropDownList" x="24" y="1" width="86" dataProvider="{monthList}" selectedIndex="0" change="monthChanged()"
                        fontSize="10" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>
        <s:NumericStepper id="tempSE" x="114" y="1" width="44" height="20" valueParseFunction="{GlobalValues.parseIntValue}" minimum="-20" maximum="40" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin" change="tempChanged()"/>
        <s:RichText x="{tempSE.x + tempSE.width + 3}" y="8" styleName="pupupPanelGrayFontStyle" color="0xf5f5f5">
            <s:span>C</s:span><s:span baselineShift="superscript">0</s:span>
        </s:RichText>
    </s:Group>

    <s:Button id="freezeStateButton" y="80" x="24" width="153" color="gray" fontSize="10" fontWeight="bold"  click="freezeReferenceState()" label="{resourceManager.getString('hm','hm.button.compare.houses')}" />

    <hmbtn:ImageSkinnableButton top="-9" right="-9" buttonMode="true" click="openInfoPanel(event)"
            upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon.png')"
            overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon_over.png')">
    </hmbtn:ImageSkinnableButton>

    <fx:Script><![CDATA[
        ]]></fx:Script>
</hm:HeatMasterResultComponent>
