<?xml version="1.0"?>
<hm:HeatMasterResultComponent
        implements="pl.znr.heatmaster.core.HouseStandardChangeListener,pl.znr.heatmaster.core.state.ICalculationStateListener"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:hm="pl.znr.heatmaster.ui.components.*"
        creationComplete="heatingPopupInitialized()"
        xmlns:hmbtn="pl.znr.heatmaster.ui.components.button.*">
    <!-- To change this template use File | Settings | File Templates. -->

    <fx:Declarations>

    </fx:Declarations>

    <fx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.collections.IList;
        import mx.controls.Alert;
        import mx.formatters.NumberBaseRoundType;
        import mx.formatters.NumberFormatter;

        import pl.znr.heatmaster.HeatMaster;
        import pl.znr.heatmaster.config.BusinessConfiguration;
        import pl.znr.heatmaster.config.CountryItem;
        import pl.znr.heatmaster.config.dictionary.model.HeatingSourceType;
        import pl.znr.heatmaster.config.dictionary.model.HouseStandardTypeItem;
        import pl.znr.heatmaster.config.dictionary.model.SolarCollectorType;
        import pl.znr.heatmaster.config.dictionary.model.WarmWaterDistribution;
        import pl.znr.heatmaster.config.dictionary.model.WarmWaterStorage;
        import pl.znr.heatmaster.constants.GlobalValues;
        import pl.znr.heatmaster.constants.NaturalUnit;
        import pl.znr.heatmaster.constants.combo.HouseType;
        import pl.znr.heatmaster.core.DataContext;
        import pl.znr.heatmaster.core.HouseStandardTypeContext;
        import pl.znr.heatmaster.core.ProcessingResult;
        import pl.znr.heatmaster.core.converter.ConversionData;
        import pl.znr.heatmaster.core.model.HeatingSourceData;
        import pl.znr.heatmaster.core.model.HouseStandardTypeModel;
        import pl.znr.heatmaster.core.model.SolarCollectorData;
        import pl.znr.heatmaster.core.model.WarmWaterData;
        import pl.znr.heatmaster.util.HeatMasterFormatter;
        import pl.znr.heatmaster.util.HouseTypeHelper;

        import spark.components.BorderContainer;

        private var controlsVisible:Boolean = false;
        private var previousControlsVisible:Boolean = false;

        private var solarSurfaceChanged = false;
        private var personCount:int = GlobalValues.INITIAL_PERSON_NUMBER;
        private var previousHouseType:int = HouseType.DETACHED;

        private var currentImg:mx.controls.Image;
        private var warmWaterIncluded:Boolean = false;

        [Bindable]
        private var detachedHeatingSourceList:ArrayCollection;
        [Bindable]
        private var multiFamilyHeatingSourceList:ArrayCollection;
        [Bindable]
        private var warmWaterDetachedHeatingSourceList:ArrayCollection;
        [Bindable]
        private var warmWaterMultiFamilyHeatingSourceList:ArrayCollection;

        [Bindable]
        private var detachedWarmWaterDistributionList:ArrayCollection;
        [Bindable]
        private var multiFamilyWarmWaterDistributionList:ArrayCollection;
        [Bindable]
        private var warmWaterStorageList:ArrayCollection;

        [Bindable]
        private var solarCollectorTypesList:ArrayCollection;

        [Bindable]
        private var warmWaterDistributionDataProvider:IList = detachedWarmWaterDistributionList;

        [Bindable]
        private var showNaturalUnit:Boolean = true;

        private var localCurrency:Boolean = false;
        private var selectedCountry:CountryItem;

        private var electricityHeatingSourceType:HeatingSourceType;


        override public function configurationRead(businessConfiguration:BusinessConfiguration):void {
            detachedHeatingSourceList = toHeatingSourceObjectList(businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.detachedHeatingSourceTypes);
            heatingTypeDropDownList.selectedIndex = businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.detachedHeatingSelectedIndex;

            warmWaterDetachedHeatingSourceList = toHeatingSourceObjectList(businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.warmWaterDetachedHeatingSourceTypes);
            warmWaterHeatingTypeDropDownList.selectedIndex = businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.warmWaterDetachedSelectedIndex;

            multiFamilyHeatingSourceList = toHeatingSourceObjectList(businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.multiFamilyHeatingSourceTypes);
            warmWaterMultiFamilyHeatingSourceList = toHeatingSourceObjectList(businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.warmWaterMultiFamilyHeatingSourceTypes);

            detachedWarmWaterDistributionList = toComboObjectList(businessConfiguration.dictionaryConfig.waterStorageDistributionConfiguration.waterDistributionTypes);
            multiFamilyWarmWaterDistributionList = toComboObjectList(businessConfiguration.dictionaryConfig.waterStorageDistributionConfiguration.waterDistributionTypes);
            warmWaterStorageList = toComboObjectList(businessConfiguration.dictionaryConfig.waterStorageDistributionConfiguration.waterStorageTypes);

            solarCollectorTypesList = toComboObjectList(businessConfiguration.dictionaryConfig.solarCollectorsTypeConfig.solarCollectorTypes);

            warmWaterDistributionDropDownList.selectedIndex = businessConfiguration.dictionaryConfig.waterStorageDistributionConfiguration.distributionSelectedIndex;
            warmWaterStorageDropDownList.selectedIndex = businessConfiguration.dictionaryConfig.waterStorageDistributionConfiguration.storageSelectedIndex;
            collectorTypeDropDownList.selectedIndex = businessConfiguration.dictionaryConfig.solarCollectorsTypeConfig.selectedIndex;

            electricityHeatingSourceType = businessConfiguration.dictionaryConfig.heatingSourceTypeConfiguration.electricityHeatingSourceType;

            heatingPopupInitialized();

            configChanged(businessConfiguration.countryItem, true);
        }

        override public function langChanged(lang:String):void {
            var oldIdx:int = heatingTypeDropDownList.selectedIndex;
            detachedHeatingSourceList = translateComboItemsAndRefresh(detachedHeatingSourceList, lang);
            multiFamilyHeatingSourceList = translateComboItemsAndRefresh(multiFamilyHeatingSourceList, lang);
            heatingTypeDropDownList.dataProvider = previousHouseType == HouseType.DETACHED ? detachedHeatingSourceList : multiFamilyHeatingSourceList;
            heatingTypeDropDownList.selectedIndex = oldIdx;

            oldIdx = warmWaterHeatingTypeDropDownList.selectedIndex;
            warmWaterDetachedHeatingSourceList = translateComboItemsAndRefresh(warmWaterDetachedHeatingSourceList, lang);
            warmWaterMultiFamilyHeatingSourceList = translateComboItemsAndRefresh(warmWaterMultiFamilyHeatingSourceList, lang);
            warmWaterHeatingTypeDropDownList.dataProvider = previousHouseType == HouseType.DETACHED ? warmWaterDetachedHeatingSourceList : warmWaterMultiFamilyHeatingSourceList;
            warmWaterHeatingTypeDropDownList.selectedIndex = oldIdx;

            oldIdx = warmWaterStorageDropDownList.selectedIndex;
            warmWaterStorageList = translateComboItemsAndRefresh(warmWaterStorageList, lang);
            warmWaterStorageDropDownList.dataProvider = warmWaterStorageList;
            warmWaterStorageDropDownList.selectedIndex = oldIdx;

            oldIdx = warmWaterDistributionDropDownList.selectedIndex;
            detachedWarmWaterDistributionList = translateComboItemsAndRefresh(detachedWarmWaterDistributionList, lang);
            multiFamilyWarmWaterDistributionList = translateComboItemsAndRefresh(multiFamilyWarmWaterDistributionList, lang);
            warmWaterDistributionDropDownList.dataProvider = previousHouseType == HouseType.DETACHED ? detachedWarmWaterDistributionList : multiFamilyWarmWaterDistributionList;
            warmWaterDistributionDropDownList.selectedIndex = oldIdx;

            oldIdx = collectorTypeDropDownList.selectedIndex;
            solarCollectorTypesList = translateComboItemsAndRefresh(solarCollectorTypesList, lang);
            collectorTypeDropDownList.dataProvider = solarCollectorTypesList;
            collectorTypeDropDownList.selectedIndex = oldIdx;
            trace("Lang changed heating popup...");
            applyCurrencyToLabels(selectedCountry, localCurrency);
        }

        override public function initData(dataContext:DataContext):DataContext {
            try {

                warmWaterDistributionDataProvider = detachedWarmWaterDistributionList;
                var heatingSourceType:HeatingSourceType = heatingTypeDropDownList.selectedItem.data.type as HeatingSourceType;
                var warmWaterHeatingSourceType:HeatingSourceType = warmWaterHeatingTypeDropDownList.selectedItem.data.type as HeatingSourceType;
                var heatingData:HeatingSourceData = createHeatingData();

                dataContext.heatingData = heatingData;
                dataContext.solarCollectorData = createSolarCollectorData();
                var warmWaterData:WarmWaterData = createWarmWaterData();

                dataContext.houseData.warmWaterData.distributorEfficiency = warmWaterData.distributorEfficiency;
                dataContext.houseData.warmWaterData.storeEfficiency = warmWaterData.storeEfficiency;
                dataContext.houseData.warmWaterData.warmWaterDistribution = warmWaterData.warmWaterDistribution;
                dataContext.houseData.warmWaterData.warmWaterStorage = warmWaterData.warmWaterStorage;

                dataContext.conversionData.pricePerKwh = heatingData.pricePerkWh;
                dataContext.conversionData.waterPricePerkWh = warmWaterHeatingSourceType.pricePerkWh;

                dataContext.conversionData.houseHeatingEfficiency = heatingData.heatingEfficiency / 100;
                dataContext.conversionData.warmWaterHeatingEfficiency = warmWaterHeatingSourceType.efficiency / 100;
                dataContext.conversionData.finalToPrimaryCoefficient = heatingSourceType.finalToPrimaryCoefficient;
                dataContext.conversionData.warmWaterFinalToPrimaryCoefficient = warmWaterHeatingSourceType.finalToPrimaryCoefficient;
                dataContext.conversionData.emissionCoefficient = heatingSourceType.emissionPerKWh;
                dataContext.conversionData.waterEmissionCoefficient = warmWaterHeatingSourceType.emissionPerKWh;

            } catch (e:Error) {
                trace("Error in initData heatingPopupData: " + e.getStackTrace());
                Alert.show("Error in initData housePopupData: ", e.message);
            }
            return dataContext;
        }

        override public function setupView(dataContext:DataContext):void {
            var houseType:int = dataContext.houseData.houseType;
            var heatingData:HeatingSourceData = dataContext.heatingData;
            var warmWaterData:WarmWaterData = dataContext.houseData.warmWaterData;
            var collectorData:SolarCollectorData = dataContext.solarCollectorData;

            previousHouseType = houseType;

            applyHeatingDataToControls(houseType, heatingData, dataContext.conversionData);
            applyWarmWaterDataToControls(houseType, heatingData, warmWaterData, dataContext.conversionData);
            applySolarDataToControls(houseType, collectorData);

            warmWaterIncluded = dataContext.includeWarmWater;
            includeWarmWaterCheckBox.selected = warmWaterIncluded;

            if (dataContext.currencyLocaleCode != null) {
                var currencyName:String = resourceManager.getString('hm', dataContext.currencyLocaleCode);
                heatingCostRichText.text = currencyName;
                warmWaterHeatingCostRichText.text = currencyName;
            }


            var heatingSourceType:HeatingSourceType = heatingTypeDropDownList.selectedItem.data.type as HeatingSourceType;
            naturalUnitCostLabel.text = getNaturalUnitPriceLabelText(heatingSourceType.naturalUnit);
            naturalUnitCalorificValueRichText.text = adjustNaturalUnitText(heatingSourceType.naturalUnit);

            showNaturalUnit = heatingSourceType.showNaturalUnit;
            previousControlsVisible = controlsVisible;
            setWarmWaterVisibility(false);

            calorificValInput.enabled = heatingSourceType.heatingValueEditable;
            calorificValInput.textDisplay.editable = heatingSourceType.heatingValueEditable;
            calorificValInput.textDisplay.enabled = heatingSourceType.heatingValueEditable;
        }

        override public function resultCalculated(resultData:ProcessingResult, month:int):void {
            if (isNaN(resultData.wattsEnergyResult.heatingSourceMaxPower)) {
                maxPowerRichText.text = '';
            }
            else {
                maxPowerRichText.text = HeatMasterFormatter.formatHMValueRoundUp(resultData.wattsEnergyResult.heatingSourceMaxPower / 1000, 1);
            }
        }

        public function configChanged(configItem:CountryItem, localCurrency:Boolean, preserveLocallyChangedValues:Boolean = false):void {
            applyConfigPrices(detachedHeatingSourceList, configItem, heatingTypeDropDownList, localCurrency);
            applyConfigPrices(multiFamilyHeatingSourceList, configItem, heatingTypeDropDownList, localCurrency);
            applyConfigPrices(warmWaterDetachedHeatingSourceList, configItem, warmWaterHeatingTypeDropDownList, localCurrency);
            applyConfigPrices(warmWaterMultiFamilyHeatingSourceList, configItem, warmWaterHeatingTypeDropDownList, localCurrency);

            var heatingSourceTypeItem:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            var warmWaterHeatingSourceTypeItem:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;

            applyPriceValuesToControls(heatingSourceTypeItem);
            applyWarmWaterPriceValuesToControls(warmWaterHeatingSourceTypeItem.pricePerKwh);

            calorificValInput.enabled = heatingSourceTypeItem.type.heatingValueEditable;
            calorificValInput.textDisplay.editable = heatingSourceTypeItem.type.heatingValueEditable;
            calorificValInput.textDisplay.enabled = heatingSourceTypeItem.type.heatingValueEditable;

            selectedCountry = configItem;
            this.localCurrency = localCurrency;

            applyCurrencyToLabels(configItem, localCurrency);
        }

        private function toHeatingSourceObjectList(heatingSources:ArrayCollection):ArrayCollection {
            var result:ArrayCollection = new ArrayCollection();
            for (var i:int = 0; i < heatingSources.length; i++) {
                var heatingSourceType:HeatingSourceType = heatingSources.getItemAt(i) as HeatingSourceType;
                result.addItem({
                            name: heatingSourceType.name,
                            data: new HeatingSourceTypeItem(heatingSourceType)
                        }
                );
            }
            return result;
        }

        private function applyCurrencyToLabels(country:CountryItem, localCurrency:Boolean):void {
            var currencyCode:String = localCurrency ? country.currencyLocaleCode : HeatMaster.CURRENCY_EURO_LOCALE_CODE;
            var currencyName:String = resourceManager.getString('hm', currencyCode);

            heatingCostRichText.text = currencyName;
            warmWaterHeatingCostRichText.text = currencyName;
            heatingNaturalUnitCostRichText.text = currencyName;
        }

        public function getConfigAppliedHeatingPrice():Number {
            return priceNS.value;
        }

        public function getConfigAppliedWarmWaterPrice():Number {
            return priceWarmWaterNS.value;
        }

        public function getConfigAppliedNaturalUnitPrice():Number {
            return naturalUnitPriceNS.value;
        }

        private function applyConfigPrices(heatingTypes:ArrayCollection, configItem:CountryItem, dropDownList:DropDownList, localCurrency:Boolean):void {
            if (configItem.ignoreConfigPrices) {
                var ignoreConfigRate:Number = localCurrency ? 1.0 : 1 / configItem.currencyExchangeRate;
                for each(var item:Object in heatingTypes) {
                    var heatingSourceTypeItem:HeatingSourceTypeItem = item.data;
                    heatingSourceTypeItem.resetOriginalPrice(ignoreConfigRate);
                }
            }
            else {
                var rate:Number = localCurrency ? configItem.currencyExchangeRate : 1.0;
                for each(var item:Object in heatingTypes) {
                    var heatingSourceTypeItem:HeatingSourceTypeItem = item.data;
                    if (HeatingSourceType.isOfCoalType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.coalPrice * rate;
                    }
                    else if (HeatingSourceType.isOfGasType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.gasPrice * rate;
                    }
                    else if (HeatingSourceType.isOfOilType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.heatingOilPrice * rate;
                    }
                    else if (HeatingSourceType.isOfPelletsType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.pelletsPrice * rate;
                    }
                    else if (HeatingSourceType.isOfWoodType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.firewoodPrice * rate;
                    }
                    else if (HeatingSourceType.isOfElectricType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.electricityPrice * rate;
                    }
                    else if (HeatingSourceType.isOfCombinedType(heatingSourceTypeItem.type)) {
                        heatingSourceTypeItem.pricePerKwh = configItem.combinedPrice * rate;
                    }
                    else {
                        trace("No proper heatingType: " + configItem.code);
                    }
                    heatingSourceTypeItem.naturalUnitPrice = HeatingSourceType.toNaturalPrice(heatingSourceTypeItem.pricePerKwh, heatingSourceTypeItem.type.heatingValueMJ);
                }
            }

            var oldIdx:int = dropDownList.selectedIndex;
            heatingTypes.refresh();
            dropDownList.selectedIndex = oldIdx;
        }

        public function standardChanged(dataContext:DataContext, context:HouseStandardTypeContext):void {
            var houseType:int = dataContext.houseData.houseType;
            var heatingSourceType:HeatingSourceType = houseType == HouseTypeHelper.isDetachedType(houseType) ? context.model.heatingSourceType : context.model.multiFamilyHeatingSourceType;
            var warmWaterHeatingSourceType:HeatingSourceType = houseType == HouseTypeHelper.isDetachedType(houseType) ? context.model.warmWaterHeatingSourceType : context.model.multiFamilyWarmWaterHeatingSourceType;

            var heatIdx:int = getComboItemIndexForCollectionOfHeatingItems(heatingSourceType, heatingTypeDropDownList.dataProvider);
            var warmWaterIdx:int = getComboItemIndexForCollectionOfHeatingItems(warmWaterHeatingSourceType, warmWaterHeatingTypeDropDownList.dataProvider);
            heatingTypeDropDownList.selectedIndex = heatIdx;

            var heatingSourceTypeItem:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            applyHeatingValuesToControls(heatingSourceTypeItem.type, heatingSourceType.pricePerkWh, heatingSourceType.naturalUnitPrice);

            if (warmWaterIdx != -1) {
                warmWaterHeatingTypeDropDownList.selectedIndex = warmWaterIdx;
                var heatingWarmWaterSourceTypeItem:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
                applyWarmWaterValuesToControls(warmWaterHeatingSourceType, warmWaterHeatingSourceType.pricePerkWh);
            }

            calorificValInput.enabled = heatingSourceType.heatingValueEditable;
            calorificValInput.textDisplay.editable = heatingSourceType.heatingValueEditable;
            calorificValInput.textDisplay.enabled = heatingSourceType.heatingValueEditable;

            var warmWaterDistributionIdx:int = getComboItemIndexForCollectionById(context.model.warmWaterDistribution.id, detachedWarmWaterDistributionList);
            var warmWaterStorageIdx:int = getComboItemIndexForCollectionById(context.model.warmWaterStorage.id, warmWaterStorageList);

            if (warmWaterDistributionIdx != -1) {
                warmWaterDistributionDropDownList.selectedIndex = warmWaterDistributionIdx;

                dataContext.houseData.warmWaterData.distributorEfficiency = context.model.warmWaterDistribution.efficiency;
                dataContext.houseData.warmWaterData.warmWaterDistribution = context.model.warmWaterDistribution;
            }

            if (warmWaterStorageIdx != -1) {
                warmWaterStorageDropDownList.selectedIndex = warmWaterStorageIdx;

                dataContext.houseData.warmWaterData.storeEfficiency = context.model.warmWaterStorage.efficiency;
                dataContext.houseData.warmWaterData.warmWaterStorage = context.model.warmWaterStorage;
            }

            applySolarDataToControls(houseType, context.model.solarCollectorData);

            var heatingSourceData:HeatingSourceData = createHeatingData();

            dataContext.heatingData = heatingSourceData;
            dataContext.solarCollectorData = context.model.solarCollectorData;

            var conversionData:ConversionData = dataContext.conversionData;
            conversionData.pricePerKwh = heatingSourceData.pricePerkWh;
            conversionData.waterPricePerkWh = heatingSourceData.priceWaterPerkWh;
            conversionData.houseHeatingEfficiency = heatingSourceData.heatingEfficiency / 100;
            conversionData.warmWaterHeatingEfficiency = heatingSourceData.waterHeatingEfficiency / 100;
            conversionData.finalToPrimaryCoefficient = heatingSourceData.finalToPrimaryCoefficient;
            conversionData.warmWaterFinalToPrimaryCoefficient = heatingSourceData.warmWaterFinalToPrimaryCoefficient;
            conversionData.emissionCoefficient = heatingSourceData.emissionCoefficient;
            conversionData.waterEmissionCoefficient = heatingSourceData.waterEmissionCoefficient;
        }

        public function getOrder():int {
            return 0;
        }

        public function houseTypeChanged(houseType:int, standardTypeItem:HouseStandardTypeItem):WarmWaterData {
            var currentHeatingSourceType:HeatingSourceType = heatingTypeDropDownList.selectedItem.data.type;
            var warmWaterHeatingSourceType:HeatingSourceType = warmWaterHeatingTypeDropDownList.selectedItem.data.type;
            var warmWaterDistribution:WarmWaterDistribution = warmWaterDistributionDropDownList.selectedItem.data;

            var houseStandardModel:HouseStandardTypeModel = standardTypeItem.houseStandardTypeModel;

            var heatingTypeChanged:Boolean = false;

            if (houseType == HouseType.DETACHED) {
                var heatingIndex:int = getIndexOfHeatingItem(currentHeatingSourceType, detachedHeatingSourceList);
                if (heatingIndex < 0) {
                    heatingIndex = getIndexOfHeatingItem(houseStandardModel.heatingSourceType, detachedHeatingSourceList);
                    if (heatingIndex < 0) {
                        heatingIndex = 0;
                    }
                    heatingTypeChanged = true;
                }

                heatingTypeDropDownList.dataProvider = detachedHeatingSourceList;
                heatingTypeDropDownList.selectedIndex = heatingIndex;

                heatingIndex = getIndexOfHeatingItem(warmWaterHeatingSourceType, warmWaterDetachedHeatingSourceList);
                if (heatingIndex < 0) {
                    heatingIndex = getIndexOfHeatingItem(houseStandardModel.warmWaterHeatingSourceType, warmWaterDetachedHeatingSourceList);
                    if (heatingIndex < 0) {
                        heatingIndex = 0;
                    }
                    heatingTypeChanged = true;
                }

                warmWaterHeatingTypeDropDownList.dataProvider = warmWaterDetachedHeatingSourceList;
                warmWaterHeatingTypeDropDownList.selectedIndex = heatingIndex;

                var distributionIdx:int = getComboItemIndexForCollection(warmWaterDistribution, detachedWarmWaterDistributionList);
                if (distributionIdx < 0) {
                    heatingTypeChanged = true;
                    distributionIdx = 0;
                }

                warmWaterDistributionDropDownList.dataProvider = detachedWarmWaterDistributionList;
                warmWaterDistributionDropDownList.selectedIndex = distributionIdx;
            }
            else if (previousHouseType == HouseType.DETACHED) {
                heatingIndex = getIndexOfHeatingItem(currentHeatingSourceType, multiFamilyHeatingSourceList);
                if (heatingIndex < 0) {
                    heatingIndex = getIndexOfHeatingItem(houseStandardModel.multiFamilyHeatingSourceType, multiFamilyHeatingSourceList);
                    if (heatingIndex < 0) {
                        heatingIndex = 0;
                    }
                    heatingTypeChanged = true;
                }

                heatingTypeDropDownList.dataProvider = multiFamilyHeatingSourceList;
                heatingTypeDropDownList.selectedIndex = heatingIndex;

                heatingIndex = getIndexOfHeatingItem(warmWaterHeatingSourceType, warmWaterMultiFamilyHeatingSourceList);
                if (heatingIndex < 0) {
                    heatingIndex = 0;
                    if (heatingIndex < 0) {
                        heatingIndex = getIndexOfHeatingItem(houseStandardModel.multiFamilyWarmWaterHeatingSourceType, warmWaterMultiFamilyHeatingSourceList);
                    }
                    heatingTypeChanged = true;
                }

                warmWaterHeatingTypeDropDownList.dataProvider = warmWaterMultiFamilyHeatingSourceList;
                warmWaterHeatingTypeDropDownList.selectedIndex = heatingIndex;

                distributionIdx = getComboItemIndexForCollection(warmWaterDistribution, multiFamilyWarmWaterDistributionList);
                if (distributionIdx < 0) {
                    heatingTypeChanged = true;
                    distributionIdx = 0;
                }

                warmWaterDistributionDropDownList.dataProvider = multiFamilyWarmWaterDistributionList;
                warmWaterDistributionDropDownList.selectedIndex = distributionIdx;
            }

            previousHouseType = houseType;

            if (heatingTypeChanged) {
                try {
                    var currentHeatingSourceTypeItem:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data;
                    var warmWaterHeatingSourceTypeItem:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem.data;
                    applyHeatingValuesToControls(currentHeatingSourceTypeItem.type, currentHeatingSourceTypeItem.pricePerKwh, currentHeatingSourceTypeItem.naturalUnitPrice);
                    applyWarmWaterValuesToControls(warmWaterHeatingSourceTypeItem.type, warmWaterHeatingSourceTypeItem.pricePerKwh);
                } catch (e:Error) {
                    Alert.show("Error applying values to heating popup controls...");
                }
                try {
                    heatMasterListener.setConversionData(createHeatingData());
                } catch (e:Error) {
                    Alert.show("Error creating heatingData....");
                }
            }

            var regularRoof:Boolean = HouseTypeHelper.hasRegularRoof(houseType);
            collectorTypeDropDownList.enabled = regularRoof;
            setNumericStepperEnable(regularRoof, solarSurfaceNS);
            return createWarmWaterData();
        }

        public function calculationStateSwitched(stateFrozen:Boolean):void {
            /*includeWarmWaterCheckBox.enabled = !stateFrozen;
             warmWaterBorderContainer.enabled = !stateFrozen;
             */
        }

        public function rollDownStartupPopup():void {
            heatPopupMainSmallImg.visible = true;
            mainGroup.visible = true;
            heatPopupOkBtn.visible = true;
        }

        public function hideStartState():void {
            setRolledBackState();
            var heatMaster:HeatMaster = HeatMaster.getInstance();
            heatMaster.goToNormalState();
        }

        public function setRolledBackState():void {
            heatPopupMainSmallImg.visible = false;
            heatPopupOkBtn.visible = false;
            includeWarmWaterCheckBox.visible = true;
            tabClickGroup.visible = true;
            previousControlsVisible = controlsVisible;
            controlsVisible = false;
            setControlsVisibility(controlsVisible);
        }

        public function setPreviousVisibilityState():void {
            controlsVisible = previousControlsVisible;
            setControlsVisibility(controlsVisible);
        }

        private function heatingPopupInitialized():void {
            currentImg = heatPopupMainSmallImg;

            var heatingSourceType:HeatingSourceType = heatingTypeDropDownList.selectedItem.data.type as HeatingSourceType;
            var warmWaterHeatingSourceType:HeatingSourceType = warmWaterHeatingTypeDropDownList.selectedItem.data.type as HeatingSourceType;

            efficiencyNS.value = heatingSourceType.efficiency;
            priceNS.value = heatingSourceType.pricePerkWh;
            calorificValInput.value = heatingSourceType.heatingValueMJ;
            naturalUnitPriceNS.value = heatingSourceType.naturalUnitPrice;
            naturalUnitPriceNS.stepSize = HeatMasterFormatter.getStepSize(heatingSourceType.naturalUnitPrice);
            calorificValInput.stepSize = HeatMasterFormatter.getStepSize(heatingSourceType.heatingValueMJ);
            naturalUnitCostLabel.text = getNaturalUnitPriceLabelText(heatingSourceType.naturalUnit);
            naturalUnitCalorificValueRichText.text = adjustNaturalUnitText(heatingSourceType.naturalUnit);

            showNaturalUnit = heatingSourceType.showNaturalUnit;

            efficiencyWarmWaterNS.value = warmWaterHeatingSourceType.efficiency;
            priceWarmWaterNS.value = warmWaterHeatingSourceType.pricePerkWh;
        }

        private function applyHeatingDataToControls(houseType:int, heatingData:HeatingSourceData, conversionData:ConversionData):void {
            var heatingIdx:int = -1;
            if (houseType == HouseType.DETACHED) {
                heatingIdx = getComboItemIndexForCollectionOfHeatingItems(heatingData.heatingType, detachedHeatingSourceList);
                heatingTypeDropDownList.dataProvider = detachedHeatingSourceList;
            }
            else {
                heatingIdx = getComboItemIndexForCollectionOfHeatingItems(heatingData.heatingType, multiFamilyHeatingSourceList);
                heatingTypeDropDownList.dataProvider = multiFamilyHeatingSourceList;
            }

            heatingTypeDropDownList.selectedIndex = heatingIdx;
            efficiencyNS.value = heatingData.heatingEfficiency;
            priceNS.value = conversionData.pricePerKwh;

            if (!isNaN(heatingData.naturalUnitPrice)) {
                naturalUnitPriceNS.value = heatingData.naturalUnitPrice;
                naturalUnitPriceNS.stepSize = HeatMasterFormatter.getStepSize(heatingData.naturalUnitPrice);
            }
            if (!isNaN(heatingData.calorificValue)) {
                calorificValInput.value = heatingData.calorificValue;
                calorificValInput.stepSize = HeatMasterFormatter.getStepSize(heatingData.calorificValue);
            }
        }

        private function applyWarmWaterDataToControls(houseType:int, heatingData:HeatingSourceData, warmWaterData:WarmWaterData, conversionData:ConversionData):void {
            var heatingSourceTypeIdx:int = -1;
            var heatingDistributionIdx:int = -1;
            if (houseType == HouseType.DETACHED) {
                warmWaterHeatingTypeDropDownList.dataProvider = warmWaterDetachedHeatingSourceList;
                heatingSourceTypeIdx = getComboItemIndexForCollectionOfHeatingItems(heatingData.waterHeatingType, warmWaterDetachedHeatingSourceList);

                warmWaterDistributionDropDownList.dataProvider = detachedWarmWaterDistributionList;
                heatingDistributionIdx = getComboItemIndexForCollectionById(warmWaterData.warmWaterDistribution.id, detachedWarmWaterDistributionList);

            }
            else {
                warmWaterHeatingTypeDropDownList.dataProvider = warmWaterMultiFamilyHeatingSourceList;
                heatingSourceTypeIdx = getComboItemIndexForCollectionOfHeatingItems(heatingData.waterHeatingType, warmWaterMultiFamilyHeatingSourceList);

                warmWaterDistributionDropDownList.dataProvider = multiFamilyWarmWaterDistributionList;
                heatingDistributionIdx = getComboItemIndexForCollectionById(warmWaterData.warmWaterDistribution.id, multiFamilyWarmWaterDistributionList);
            }

            if (heatingSourceTypeIdx == -1) {
                Alert.show("Couldn't match warmWaterHeatingSourceType: " + heatingData.waterHeatingType.getId());
            }
            if (heatingDistributionIdx == -1) {
                Alert.show("Couldn't match warmWaterDistributionIdx: " + warmWaterData.warmWaterDistribution.getId());
            }

            warmWaterHeatingTypeDropDownList.selectedIndex = heatingSourceTypeIdx;
            warmWaterDistributionDropDownList.selectedIndex = heatingDistributionIdx;

            warmWaterStorageDropDownList.selectedIndex = getComboItemIndexForCollection(warmWaterData.warmWaterStorage, warmWaterStorageList);

            efficiencyWarmWaterNS.value = heatingData.waterHeatingEfficiency;
            priceWarmWaterNS.value = conversionData.waterPricePerkWh;
        }

        private function applySolarDataToControls(houseType:int, solarData:SolarCollectorData):void {
            var collectorType:SolarCollectorType = solarData.collectorType;
            var regularRoof:Boolean = HouseTypeHelper.hasRegularRoof(houseType);

            collectorTypeDropDownList.selectedIndex = getComboItemIndexForCollectionById(solarData.collectorType.id, solarCollectorTypesList);
            solarSurfaceNS.value = solarData.surface;

            solarSurfaceNS.visible = collectorType.type != SolarCollectorType.NONE_TYPE;
            collectorSurfaceLabel.visible = collectorType.type != SolarCollectorType.NONE_TYPE;

            collectorTypeDropDownList.enabled = regularRoof;

            setNumericStepperEnable(regularRoof, solarSurfaceNS);
        }

        private function getIndexOfHeatingItem(heatingSourceType:HeatingSourceType, list:ArrayCollection):int {
            for (var i:int = 0; i < list.length; i++) {
                var item:Object = list.getItemAt(i);
                if (item.data.type == heatingSourceType) {
                    return i;
                }
            }
            return -1;
        }

        private function createWarmWaterData():WarmWaterData {
            var warmWaterDistribution:WarmWaterDistribution = warmWaterDistributionDropDownList.selectedItem.data;
            var warmWaterStorage:WarmWaterStorage = warmWaterStorageDropDownList.selectedItem.data;
            var warmWaterData:WarmWaterData = new WarmWaterData();
            warmWaterData.heatingSourceType = warmWaterHeatingTypeDropDownList.selectedItem.data.type;
            warmWaterData.distributorEfficiency = warmWaterDistribution.efficiency;
            warmWaterData.storeEfficiency = warmWaterStorage.efficiency;
            warmWaterData.warmWaterDistribution = warmWaterDistribution;
            warmWaterData.warmWaterStorage = warmWaterStorage;
            return warmWaterData;
        }

        private function createSolarCollectorData():SolarCollectorData {
            var solarCollectorType:SolarCollectorType = collectorTypeDropDownList.selectedItem.data;
            var solarSurface:Number = solarSurfaceNS.value;
            var solarCollectorData:SolarCollectorData = new SolarCollectorData();
            solarCollectorData.collectorType = solarCollectorType;
            if (solarCollectorType.type == SolarCollectorType.NONE_TYPE) {
                solarCollectorData.surface = 0;
                solarCollectorData.count = 0;
            }
            else {
                solarCollectorData.surface = solarSurface;
                solarCollectorData.count = solarSurface / solarCollectorType.unitSurface;
            }
            return solarCollectorData;
        }

        private function heatingTypeChanged():void {
            var heatingSourceType:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            var changed:Boolean = forceChangeWarmWaterHeatingType(heatingSourceType.type);

            var pricePerKwh:Number = heatingSourceType.pricePerKwh;
            var naturalUnitPrice:Number = heatingSourceType.naturalUnitPrice;
            var rate:Number = getCurrentExchangeRate();


            applyHeatingValuesToControls(heatingSourceType.type, pricePerKwh * rate, naturalUnitPrice * rate);
            if (changed) {
                applyWarmWaterValuesToControls(heatingSourceType.type, pricePerKwh * rate);
            }
            calorificValInput.enabled = heatingSourceType.type.heatingValueEditable;
            calorificValInput.textDisplay.editable = heatingSourceType.type.heatingValueEditable;
            calorificValInput.textDisplay.enabled = heatingSourceType.type.heatingValueEditable;

            var heatingData:HeatingSourceData = createHeatingData();
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function getCurrentExchangeRate():Number {
            if (localCurrency) {
                return selectedCountry.ignoreConfigPrices ? 1.0 : selectedCountry.currencyExchangeRate;
            }
            else {
                return selectedCountry.ignoreConfigPrices ? 1 / selectedCountry.currencyExchangeRate : 1.0;
            }
        }


        private function forceChangeWarmWaterHeatingType(heatingSourceType:HeatingSourceType):Boolean {
            var heatingIdx:int = -1;
            if (previousHouseType == HouseType.DETACHED) {
                heatingIdx = getComboItemIndexForCollectionOfHeatingItems(heatingSourceType, warmWaterDetachedHeatingSourceList);
            }
            else {
                heatingIdx = getComboItemIndexForCollectionOfHeatingItems(heatingSourceType, warmWaterMultiFamilyHeatingSourceList);
            }
            if (heatingIdx != -1) {
                warmWaterHeatingTypeDropDownList.selectedIndex = heatingIdx;
            }
            else {
                //get electric heating type
                if (previousHouseType == HouseType.DETACHED) {
                    heatingIdx = getComboItemIndexForCollectionOfHeatingItems(electricityHeatingSourceType, warmWaterDetachedHeatingSourceList);
                }
                else {
                    heatingIdx = getComboItemIndexForCollectionOfHeatingItems(electricityHeatingSourceType, warmWaterMultiFamilyHeatingSourceList);
                }
                warmWaterHeatingTypeDropDownList.selectedIndex = heatingIdx;
            }
            return heatingIdx != -1;
        }

        private function applyHeatingValuesToControls(heatingSourceType:HeatingSourceType, pricePerkWh:Number, naturalUnitPrice:Number):void {
            efficiencyNS.value = heatingSourceType.efficiency;
            priceNS.value = pricePerkWh;
            naturalUnitPriceNS.value = naturalUnitPrice;
            calorificValInput.value = heatingSourceType.heatingValueMJ;
            naturalUnitPriceNS.stepSize = HeatMasterFormatter.getStepSize(heatingSourceType.naturalUnitPrice);
            calorificValInput.stepSize = HeatMasterFormatter.getStepSize(heatingSourceType.heatingValueMJ);

            naturalUnitCostLabel.text = getNaturalUnitPriceLabelText(heatingSourceType.naturalUnit);
            showNaturalUnit = heatingSourceType.showNaturalUnit;
            naturalUnitCalorificValueRichText.text = adjustNaturalUnitText(heatingSourceType.naturalUnit);
        }

        private function applyWarmWaterValuesToControls(warmWaterHeatingSourceType:HeatingSourceType, pricePerkWh:Number):void {
            efficiencyWarmWaterNS.value = warmWaterHeatingSourceType.efficiency;
            priceWarmWaterNS.value = pricePerkWh;
        }

        private function applyPriceValuesToControls(heatingSourceTypeItem:HeatingSourceTypeItem):void {
            priceNS.value = heatingSourceTypeItem.pricePerKwh;
            naturalUnitPriceNS.value = heatingSourceTypeItem.naturalUnitPrice;
        }

        private function applyWarmWaterPriceValuesToControls(pricePerkWh:Number):void {
            priceWarmWaterNS.value = pricePerkWh;
        }

        private function warmWaterHeatingTypeChanged():void {
            var warmWaterHeatingSourceType:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            applyWarmWaterValuesToControls(warmWaterHeatingSourceType.type, warmWaterHeatingSourceType.pricePerKwh);
            var heatingData:HeatingSourceData = createHeatingData();
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function efficiencyChanged():void {
            var heatingSourceType:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            // priceNS.value = heatingSourceType.pricePerkWh * (100 / efficiencyNS.value);
            priceNS.value = heatingSourceType.pricePerKwh;
            var heatingData:HeatingSourceData = createHeatingData();
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function priceChanged():void {
            var heatingData:HeatingSourceData = createHeatingData();
            heatingData.pricePerkWh = priceNS.value;
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function naturalUnitPriceChanged():void {
            var heatingSourceTypeItem:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            var warmWaterHeatingSourceTypeItem:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem as HeatingSourceTypeItem;
            var pricePerKWh:Number = HeatingSourceType.toPricePerKWh(naturalUnitPriceNS.value, heatingSourceTypeItem.heatingValueMJ);
            priceNS.value = pricePerKWh;
            heatingSourceTypeItem.pricePerKwh = pricePerKWh;
            heatingSourceTypeItem.naturalUnitPrice = naturalUnitPriceNS.value;
            if (warmWaterHeatingSourceTypeItem != null && heatingSourceTypeItem.type == warmWaterHeatingSourceTypeItem.type) {
                priceWarmWaterNS.value = pricePerKWh;
                warmWaterHeatingSourceTypeItem.pricePerKwh = pricePerKWh;
                warmWaterHeatingSourceTypeItem.naturalUnitPrice = naturalUnitPriceNS.value;
            }


            var heatingData:HeatingSourceData = createHeatingData();
            heatingData.pricePerkWh = pricePerKWh;
            heatingData.naturalUnitPrice = naturalUnitPriceNS.value;
            if (warmWaterHeatingSourceTypeItem != null && heatingSourceTypeItem.type == warmWaterHeatingSourceTypeItem.type) {
                heatingData.priceWaterPerkWh = pricePerKWh;
            }
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function calorificValueChanged():void {
            var heatingSourceType:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            var warmWaterHeatingSourceType:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem as HeatingSourceTypeItem;
            var heatingValueMJ:Number = calorificValInput.value;
            var pricePerKWh:Number = HeatingSourceType.toPricePerKWh(naturalUnitPriceNS.value, heatingValueMJ);
            priceNS.value = pricePerKWh;
            if (warmWaterHeatingSourceType != null && heatingSourceType.type == warmWaterHeatingSourceType.type) {
                priceWarmWaterNS.value = pricePerKWh;
            }
            var heatingData:HeatingSourceData = createHeatingData();
            heatingData.pricePerkWh = pricePerKWh;
            heatingData.naturalUnitPrice = naturalUnitPriceNS.value;
            heatingData.calorificValue = heatingValueMJ;
            if (warmWaterHeatingSourceType != null && heatingSourceType.type == warmWaterHeatingSourceType.type) {
                heatingData.priceWaterPerkWh = pricePerKWh;
            }
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function warmWaterHeatingEfficiencyChanged():void {
            var heatingSourceType:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            //priceWarmWaterNS.value = heatingSourceType.pricePerkWh * (100 / efficiencyWarmWaterNS.value);
            priceWarmWaterNS.value = heatingSourceType.pricePerKwh;
            var heatingData:HeatingSourceData = createHeatingData();
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function warmWaterPriceChanged():void {
            var heatingData:HeatingSourceData = createHeatingData();
            heatingData.priceWaterPerkWh = priceWarmWaterNS.value;
            heatMasterListener.heatingDataChanged(heatingData);
        }

        private function warmWaterDistributionChanged():void {
            heatMasterListener.storeAndDistributeEfficiencyChanged(createWarmWaterData());
        }

        private function warmWaterStorageChanged():void {
            heatMasterListener.storeAndDistributeEfficiencyChanged(createWarmWaterData());
        }

        private function collectorsTypeChanged():void {
            var solarCollectorData:SolarCollectorData = createSolarCollectorData();
            solarSurfaceNS.visible = solarCollectorData.collectorType.type != SolarCollectorType.NONE_TYPE;
            collectorSurfaceLabel.visible = solarCollectorData.collectorType.type != SolarCollectorType.NONE_TYPE;
            if (!solarSurfaceChanged) {
                if (solarCollectorData.collectorType.type != SolarCollectorType.NONE_TYPE) {
                    var collectorSurface:Number = calcSolarSurfaceByPersonCount(solarCollectorData.collectorType, personCount);
                    solarCollectorData.surface = collectorSurface;
                    solarCollectorData.count = collectorSurface / solarCollectorData.collectorType.unitSurface;
                    solarSurfaceNS.value = collectorSurface;
                }
                else {
                    solarCollectorData.surface = 0;
                    solarCollectorData.count = 0;
                }
            }
            heatMasterListener.solarCollectorsDataChanged(solarCollectorData);
        }

        private function calcSolarSurfaceByPersonCount(solarType:SolarCollectorType, personCount:int):Number {
            return personCount / solarType.personPerCollector * solarType.unitSurface;
        }

        private function collectorsSurfaceChanged():void {
            solarSurfaceChanged = true;
            heatMasterListener.solarCollectorsDataChanged(createSolarCollectorData());
        }

        private function createHeatingData():HeatingSourceData {
            var heatingSourceType:HeatingSourceTypeItem = heatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;
            var warmWaterHeatingSourceType:HeatingSourceTypeItem = warmWaterHeatingTypeDropDownList.selectedItem.data as HeatingSourceTypeItem;

            var heatingData:HeatingSourceData = new HeatingSourceData();
            heatingData.heatingType = heatingSourceType.type;
            heatingData.heatingEfficiency = efficiencyNS.value;
            heatingData.pricePerkWh = heatingSourceType.pricePerKwh;
            heatingData.naturalUnitPrice = heatingSourceType.naturalUnitPrice;
            heatingData.calorificValue = heatingSourceType.heatingValueMJ;

            heatingData.waterHeatingType = warmWaterHeatingSourceType.type;
            heatingData.waterHeatingEfficiency = efficiencyWarmWaterNS.value;
            heatingData.priceWaterPerkWh = warmWaterHeatingSourceType.pricePerKwh;

            heatingData.finalToPrimaryCoefficient = heatingSourceType.type.finalToPrimaryCoefficient;
            heatingData.warmWaterFinalToPrimaryCoefficient = warmWaterHeatingSourceType.type.finalToPrimaryCoefficient;

            heatingData.emissionCoefficient = heatingSourceType.type.emissionPerKWh;
            heatingData.waterEmissionCoefficient = warmWaterHeatingSourceType.type.emissionPerKWh;

            return heatingData;
        }

        private function hideOrShowControls():void {
            controlsVisible = !controlsVisible;
            setControlsVisibility(controlsVisible);
            heatPopupRollUpImg.visible = false;
            heatPopupRollDownImg.visible = false;
            heatPopupRollUpOverImg.visible = controlsVisible;
            heatPopupRollDownOverImg.visible = !controlsVisible;
        }

        private function hideOrShowControls1():void {

        }

        private function setControlsVisibility(visible:Boolean):void {
            currentImg.visible = visible;
            mainGroup.visible = visible;

            if (!warmWaterIncluded) {
                warmWaterBorderContainer.visible = false;
            }
            else {
                warmWaterBorderContainer.visible = visible;
            }

            heatPopupRollUpImg.visible = visible;
            heatPopupRollDownImg.visible = !visible;
        }

        private function parse(s:String):Number {
            var r:Number = parseFloat(s);
            return r;
        }

        private function format(n:Number):String {
            var format:NumberFormatter = new NumberFormatter();
            format.precision = 2;
            format.rounding = NumberBaseRoundType.NEAREST;
            format.useThousandsSeparator = false;
            return format.format(n);
        }

        private function clickGroupMouseOver():void {
            if (!heatPopupOkBtn.visible) {
                if (heatPopupRollUpImg.visible) {
                    heatPopupRollUpImg.visible = false;
                    heatPopupRollUpOverImg.visible = true;
                }
                else if (heatPopupRollDownImg.visible) {
                    heatPopupRollDownImg.visible = false;
                    heatPopupRollDownOverImg.visible = true;
                }
            }
        }

        private function clickGroupMouseOut():void {
            if (!heatPopupOkBtn.visible) {
                if (heatPopupRollUpOverImg.visible) {
                    heatPopupRollUpImg.visible = true;
                    heatPopupRollUpOverImg.visible = false;
                }
                else if (heatPopupRollDownOverImg.visible) {
                    heatPopupRollDownImg.visible = true;
                    heatPopupRollDownOverImg.visible = false;
                }
            }
        }

        private function setNumericStepperEnable(enabled:Boolean, numericStepper:NumericStepper):void {
            numericStepper.enabled = enabled;
            numericStepper.skin.setCurrentState(enabled ? "normal" : "disabled");
            numericStepper.skin.invalidateDisplayList();
        }

        private function setWarmWaterVisibility(invokeChangeListener:Boolean = true):void {
            warmWaterIncluded = includeWarmWaterCheckBox.selected;
            heatPopupMainImg.visible = warmWaterIncluded;
            heatPopupMainSmallImg.visible = !warmWaterIncluded;
            currentImg = warmWaterIncluded ? heatPopupMainImg : heatPopupMainSmallImg;
            warmWaterBorderContainer.visible = warmWaterIncluded;

            if (invokeChangeListener) {
                heatMasterListener.includeWarmWaterChanged(warmWaterIncluded);
            }
        }

        private function getComboItemIndexForCollectionOfHeatingItems(dataObject:HeatingSourceType, dataItemList:IList):int {
            for (var i:int = 0; i < dataItemList.length; i++) {
                var item:Object = dataItemList.getItemAt(i);
                var itemType:HeatingSourceTypeItem = item.data as HeatingSourceTypeItem;
                if (itemType.type.id == dataObject.id) {
                    return i;
                }
            }

            return -1;
        }

        private function getNaturalUnitPriceLabelText(naturalUnit:NaturalUnit):String {
            return resourceManager.getString("hm", "hm.label.natural-unit.price.prefix") + " " + resourceManager.getString("hm", naturalUnit.code);
        }

        private function adjustNaturalUnitText(naturalUnit:NaturalUnit):String {
            return "MJ/" + resourceManager.getString("hm", naturalUnit.code);
        }
        ]]></fx:Script>

    <mx:Image x="6"  y="10"  id="heatPopupMainSmallImg"  visible="false" source="@Embed('/pl/znr/heatmaster/assets/images/house_heat_tabs/small_panel_heat_bkg.png')" />
    <mx:Image x="9"  y="10"   id="heatPopupMainImg" scaleY="1.25"     visible="false" source="@Embed('/pl/znr/heatmaster/assets/images/house_heat_tabs/panel_heat_bkg.png')" />
    <s:Image x="12"  y="10"  id="heatPopupTabImg" visible="true" source="@Embed('/pl/znr/heatmaster/assets/images/house_heat_tabs/bar_panel_heat.png')"/>

    <s:Image x="30" y="8" id="heatPopupIconImg" source="@Embed('/pl/znr/heatmaster/assets/images/icons/heat_icon.png')"/>


    <s:Label x="75" y="18" width="177" height="20" styleName="popupPanelHeader" text="{resourceManager.getString('hm','hm.label.title.heating_source')}" fontSize="14" />
    <s:Group id="tabClickGroup" visible="false" x="15" y="10" height="35" width="280"
             click="hideOrShowControls()" mouseOver="clickGroupMouseOver()" mouseOut="clickGroupMouseOut()">
        <!--<mx:Button x="278" y="12" click="hideOrShowControls1()" visible="false" id="heatPopupRollUpImg"
                   skin="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_up_icon.png')"/>

        <mx:Button x="278" y="12" click="hideOrShowControls1()" visible="false" id="heatPopupRollDownImg"
                   skin="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_down_icon.png')"/>

        <mx:Button x="277" y="9" click="hideOrShowControls1()" visible="false" id="heatPopupRollUpOverImg"
                   skin="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_up_icon_over.png')" />

        <mx:Button x="277" y="11" click="hideOrShowControls1()" visible="false" id="heatPopupRollDownOverImg"
                   skin="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_down_icon_over.png')"/>-->

        <s:Image x="245" y="-2" id="heatPopupRollUpImg" visible="false" smoothingQuality="high" smooth="true"
                                    source="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_up_icon.png')">
        </s:Image>

        <s:Image x="245" y="-2" id="heatPopupRollDownImg"  visible="false"  smoothingQuality="high" smooth="true"
                                    source="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_down_icon.png')">
        </s:Image>

        <s:Image x="245" y="-2" id="heatPopupRollUpOverImg"    visible="false" smoothingQuality="high" smooth="true"
                                    source="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_up_icon_over.png')">
        </s:Image>

        <s:Image x="245" y="-2" id="heatPopupRollDownOverImg"  visible="false" smoothingQuality="high" smooth="true"
                                    source="@Embed('/pl/znr/heatmaster/assets/images/icons/roll_down_icon_over.png')">
        </s:Image>


    </s:Group>

    <mx:Button id="heatPopupOkBtn" visible="false" x="42" y="169" click="hideStartState()" buttonMode="true" skin="@Embed('/pl/znr/heatmaster/assets/images/OK_button_heat.png')">

    </mx:Button>

    <s:Group x="1" y="0" id="mainGroup" visible="false">
        <s:Group id="heatPopupMainGroup" x="17" y="50" width="278" height="100" >
            <s:Label right="190" y="5" color="#FF6600" fontSize="12" fontWeight="bold"
                     text="{resourceManager.getString('hm','hm.label.heating.source')}" verticalAlign="middle"/>

            <s:DropDownList id="heatingTypeDropDownList" x="91" y="0" width="215" selectedIndex="7"
                            dataProvider="{detachedHeatingSourceList}" labelField="name" change="heatingTypeChanged()"
                            skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>

            <!--Natural unit calorific value-->
            <s:Label right="190" y="35"  color="#FF6600" fontSize="12" visible="{showNaturalUnit}"
                     fontWeight="bold" paddingLeft="5" text="{resourceManager.getString('hm','hm.label.heating_value')}" verticalAlign="middle"/>
            <s:NumericStepper id="calorificValInput" x="91" y="30" width="50" height="20"  visible="{showNaturalUnit}"
                              minimum="1" maximum="50000" stepSize="1" change="calorificValueChanged()" valueParseFunction="parse" valueFormatFunction="format" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"/>
            <s:RichText id="naturalUnitCalorificValueRichText" x="145" y="35"  styleName="pupupPanelGrayFontStyle" text="MJ" verticalAlign="middle" visible="{showNaturalUnit}">
            </s:RichText>

            <!--Natural unit price-->
            <s:Label id="naturalUnitCostLabel" right="36" y="35" color="#FF6600" fontSize="12"
                     fontWeight="bold"  verticalAlign="middle"/>
            <s:NumericStepper right="-10" y="30" width="44" height="20" id="naturalUnitPriceNS" minimum="0"  maximum="5000" stepSize="0.01" valueParseFunction="{GlobalValues.parseFloatValue}" valueFormatFunction="format"
                              change="naturalUnitPriceChanged()" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"/>
            <s:RichText x="292" y="35" id="heatingNaturalUnitCostRichText" styleName="pupupPanelGrayFontStyle" text="{resourceManager.getString('hm','hm.label.currency.zl')}" textAlign="left"/>


            <!--Efficiency-->
            <s:Label right="190" y="65"  color="#FF6600" fontSize="12"
                     fontWeight="bold" paddingLeft="5" text="{resourceManager.getString('hm','hm.label.efficiency')}" verticalAlign="middle"/>
            <s:NumericStepper x="91" y="60" width="44" height="20" valueParseFunction="{GlobalValues.parseIntValue}" minimum="1" maximum="400" id="efficiencyNS" change="efficiencyChanged()" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"/>
            <s:RichText x="139" y="65" styleName="pupupPanelGrayFontStyle" text="%" />

            <!--1kWh -->
            <s:Label right="36" y="65" color="#FF6600" fontSize="12"
                     fontWeight="bold"  text="{resourceManager.getString('hm','hm.label.kwh_cost')}" verticalAlign="middle"/>
            <s:NumericStepper right="-10" y="60" width="44" height="20" id="priceNS" minimum="0.01" value = "0.45" stepSize="0.01" valueParseFunction="parse" valueFormatFunction="format"
                              change="priceChanged()"   enabled="false" skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"/>
            <s:RichText x="292" y="65" id="heatingCostRichText" styleName="pupupPanelGrayFontStyle" text="{resourceManager.getString('hm','hm.label.currency.zl')}" />

            <!--Max power-->
            <s:Label right="36" y="95" color="#FF6600" fontSize="12"
                     fontWeight="bold"  text="{resourceManager.getString('hm','hm.label.heating.source.max-power')}" verticalAlign="middle"/>
            <s:TextInput id="maxPowerRichText" right="-10" y="90" width="44" editable="false"  enabled="false" />
            <s:RichText x="292" y="96" text="kW" styleName="pupupPanelGrayFontStyle" verticalAlign="middle" textAlign="left"/>

            <!--Include warm water-->
            <s:CheckBox id="includeWarmWaterCheckBox" visible="false" x="10" y="113" click="setWarmWaterVisibility()"
                        label="{resourceManager.getString('hm','hm.label.warm_water.include')}"/>
        </s:Group>

        <s:BorderContainer id="warmWaterBorderContainer" visible="false" x="17" y="{heatPopupMainGroup.y + heatPopupMainGroup.height + 41}" borderVisible="false" width="273" height="175" borderColor="red" borderWeight="1" backgroundAlpha="0.0">

            <mx:HRule id="hRule" x="0" y="0" width="297" height="1"/>

            <s:Group id="warmWaterGroup" x="0" y="{hRule.y + hRule.height}" width="278" height="100" >
                <s:Label y="10" right="190" text="{resourceManager.getString('hm','hm.label.heating.source')}" color="#FF6600" fontSize="12" fontWeight="bold" verticalAlign="middle"/>
                <s:DropDownList id="warmWaterHeatingTypeDropDownList" x="91" y="5" width="215" selectedIndex="7"
                                dataProvider="{warmWaterDetachedHeatingSourceList}" labelField="name" change="warmWaterHeatingTypeChanged()"
                                skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>

                <s:Label right="190" y="38"  color="#FF6600" fontSize="12"
                         fontWeight="bold" paddingLeft="5" text="{resourceManager.getString('hm','hm.label.efficiency')}" verticalAlign="middle"/>

                <s:NumericStepper x="91" y="33" width="44" height="20" minimum="1" maximum="400" id="efficiencyWarmWaterNS"
                                  change="warmWaterHeatingEfficiencyChanged()"
                                  valueParseFunction="{GlobalValues.parseIntValue}"
                                  skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"/>
                <s:RichText x="139" y="38" styleName="pupupPanelGrayFontStyle" text="%"/>

                <s:Label right="36" y="38"  color="#FF6600" fontSize="12"
                         fontWeight="bold" text="{resourceManager.getString('hm','hm.label.kwh_cost')}" verticalAlign="middle"/>
                <s:NumericStepper right="-10" y="33" width="44" height="20" id="priceWarmWaterNS" minimum="0.01" value = "0.45" stepSize="0.01"
                                  valueParseFunction="{GlobalValues.parseFloatValue}" valueFormatFunction="format"
                                  change="warmWaterPriceChanged()" enabled="false"
                                  skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"/>
                <s:RichText x="292" y="38"  id="warmWaterHeatingCostRichText" styleName="pupupPanelGrayFontStyle" text="" />


                <s:Label y="65" right="190"  text="{resourceManager.getString('hm','hm.label.warm_water.distribution')}" color="#FF6600"
                         fontSize="12" fontWeight="bold" verticalAlign="middle" textAlign="center"/>
                <s:DropDownList id="warmWaterDistributionDropDownList" y="60" x="91" width="215" selectedIndex="1"
                                labelField="name" change="warmWaterDistributionChanged()" dataProvider="{detachedWarmWaterDistributionList}"
                                skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>

                <s:Label y="95" right="190" text="{resourceManager.getString('hm','hm.label.warm_water.storage')}" color="#FF6600"
                         fontSize="12" fontWeight="bold" verticalAlign="middle" textAlign="center"/>
                <s:DropDownList id="warmWaterStorageDropDownList" y="90" x="91" width="215" selectedIndex="1"
                                dataProvider="{warmWaterStorageList}" labelField="name" change="warmWaterStorageChanged()"
                                skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>
            </s:Group>

            <mx:HRule id="hRule1" x="0" y="{warmWaterGroup.y + warmWaterGroup.height + 15}" width="297" height="1"/>

            <s:Group id="solarGroup" x="0" y="{hRule1.y + hRule1.height + 1}" width="278" height="70">
                <s:Label y="5" paddingLeft="5" text="{resourceManager.getString('hm','hm.label.solar_collectors')}" styleName="pupupPanelGrayFontStyle" color="0x669900"/>

                <s:Label x="0" y="25" paddingLeft="5" width="40" height="24" text="{resourceManager.getString('hm','hm.label.type')}" color="#FF6600"
                         fontSize="12" fontWeight="bold" verticalAlign="middle" textAlign="center"/>
                <s:DropDownList id="collectorTypeDropDownList" y="25" x="50" width="130" selectedIndex="0"
                                dataProvider="{solarCollectorTypesList}" labelField="name" change="collectorsTypeChanged()"
                                skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterDropDownSkin"/>

                <s:NumericStepper id="solarSurfaceNS" visible="false" y="25" x="{collectorTypeDropDownList.x + collectorTypeDropDownList.width + 3}"
                                  width="44" height="20" minimum="1" stepSize="1" maximum="999"
                                  value="0" change="collectorsSurfaceChanged()"
                                  valueParseFunction="{GlobalValues.parseIntValue}"
                                  skinClass="pl.znr.heatmaster.ui.components.skins.HeatMasterNumericStepperSkin"  />

                <s:RichText id="collectorSurfaceLabel" visible="false" x="{solarSurfaceNS.x + solarSurfaceNS.width + 4}" verticalAlign="middle" y="30" styleName="pupupPanelGrayFontStyle">
                    <s:span>m</s:span><s:span baselineShift="superscript">2</s:span>
                </s:RichText>

            </s:Group>
        </s:BorderContainer>

    </s:Group>
</hm:HeatMasterResultComponent>
