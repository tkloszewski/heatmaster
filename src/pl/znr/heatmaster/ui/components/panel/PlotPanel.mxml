<?xml version="1.0"?>
<panel:BasePlotPanel xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:components="pl.znr.heatmaster.ui.components.*"
                     xmlns:mx="library://ns.adobe.com/flex/mx"
                     xmlns:s="library://ns.adobe.com/flex/spark"
                     xmlns:panel="pl.znr.heatmaster.ui.components.panel.*"
                     xmlns:hmbtn="pl.znr.heatmaster.ui.components.button.*"
                     initialize="popupInitialized()"
                     creationComplete="plotCreated()"
        >
    <!-- To change this template use File | Settings | File Templates. -->


    <fx:Declarations>
        <s:ArrayList id="monthList">
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_1')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_2')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_3')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_4')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_5')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_6')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_7')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_8')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_9')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_10')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_11')}</fx:String>
            <fx:String>{resourceManager.getString('hm','hm.dropdown.month_12')}</fx:String>
        </s:ArrayList>

        <fx:String id="costMainLabel">Koszty ogrzewania w poszczególnych miesiacach. [zl/mies]</fx:String>
        <fx:String id="mainLabelKWh">Bilans energetyczny budynku w kolejnych miesiącach: energia na ogrzewanie
            [kWh/mies.]
        </fx:String>
        <fx:String id="mainLabelWatts">Bilans energetyczny budynku w kolejnych miesiącach: energia na ogrzewanie [W]
        </fx:String>
        <fx:String id="mainLabelGJ">Bilans energetyczny budynku w kolejnych miesiącach: energia na ogrzewanie
            [GJ/mies]
        </fx:String>

    </fx:Declarations>

    <fx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.utils.StringUtil;

        import pl.znr.heatmaster.HeatMaster;
        import pl.znr.heatmaster.constants.EnergyClass;
        import pl.znr.heatmaster.constants.GlobalValues;
        import pl.znr.heatmaster.constants.combo.ConversionUnits;
        import pl.znr.heatmaster.core.DataContext;
        import pl.znr.heatmaster.core.ProcessingResult;
        import pl.znr.heatmaster.core.converter.ConversionData;
        import pl.znr.heatmaster.core.converter.ConvertedResult;
        import pl.znr.heatmaster.core.converter.ConverterHelper;
        import pl.znr.heatmaster.ui.components.tooltip.EnergyClassToolTip;
        import pl.znr.heatmaster.ui.components.tooltip.FinalPrimaryEnergyToolTip;
        import pl.znr.heatmaster.util.EnergyClassHelper;

        import spark.components.Label;

        private static const COST:String = "Koszty";
        private static const EMISSION:String = "Emisje";
        private static const MONTH_COST:String = "Koszty miesięczne";
        private static const MONTH_EMISSION:String = "Emisje miesięczne";


        [Bindable]
        private var userEnergyTotalConsumptionString:String;

        [Bindable]
        private var userEnergyTotalConsumptionSqMeterString:String;

        [Bindable]
        private var finalEnergyTotalConsumptionString:String;

        [Bindable]
        private var finalEnergyTotalConsumptionSqMeterString:String;

        [Bindable]
        private var primaryEnergyTotalConsumptionString:String;

        [Bindable]
        private var primaryEnergyTotalConsumptionSqMeterString:String;

        [Bindable]
        private var plotDataProvider:ArrayCollection = new ArrayCollection([]);

        [Bindable]
        private var lineSeriesDataProvider:ArrayCollection = new ArrayCollection([]);

        [Bindable]
        private var unitName:String = "";

        [Bindable]
        private var panelLabelWidth:Number;

        [Bindable]
        private var bluePlotLineVisible:Boolean = false;

        private var warmWaterGroup:Group;

        private var legendEnergyLossGroupY:int;

        private var warmWaterHeatingEfficiency:Number;

        private var warmWaterIncluded:Boolean = false;

        private var isCostUnit:Boolean;
        private var isEmissionUnit:Boolean;
        private var energyClass:EnergyClass;

        var yearlyCost:Number = 0;

        private var _originalChartWidth:int;


        override public function initData(dataContext:DataContext):DataContext {
            currencyCode = HeatMaster.CURRENCY_EURO_LOCALE_CODE;
            return dataContext;
        }

        override public function resultCalculated(resultData:ProcessingResult, month:int):void {
            try {
                var dataContext:DataContext = resultData.dataContext;

                if (warmWaterIncluded != dataContext.includeWarmWater) {
                    warmWaterIncluded = dataContext.includeWarmWater;
                    legendEnergyEmissionGroup.adjustLegend(dataContext.includeWarmWater);
                }

                var plotObject:Object;
                try {
                    plotObject = getMonthlyPlotArrayData(resultData,monthList);
                } catch (e:Error) {
                    Alert.show("Plot array data error: " + e.message);
                }

                var plotArrayData:Array = plotObject.columnData;
                var plotLineArrayData:Array = plotObject.lineData;
                plotDataProvider = new ArrayCollection(plotArrayData);
                lineSeriesDataProvider = new ArrayCollection(plotLineArrayData);
                unitName = resultData.conversionData.unitName;

                var conversionData:ConversionData = resultData.conversionData;

                currencyCode = resultData.dataContext.currencyLocaleCode;
                rawUnitName = getRawUnitName(conversionData.selectedUnit, currencyCode);

                isCostUnit = ConversionUnits.isCostUnit(conversionData.selectedUnit);
                isEmissionUnit = ConversionUnits.isEmisionUnit(conversionData.selectedUnit);
                if (isCostUnit) {
                    costEmissionLegendText.text = resourceManager.getString('hm', 'hm.label.monthly_cost');
                    costEmissionLegendItemText.text = resourceManager.getString('hm', 'hm.label.costs') + " " + resourceManager.getString('hm', currencyCode);
                }
                else if (isEmissionUnit) {
                    costEmissionLegendText.text = resourceManager.getString('hm', 'hm.label.monthly_emission');
                    costEmissionLegendItemText.text = resourceManager.getString('hm', 'hm.label.emissions');
                }

                legendCostGroup.visible = isCostUnit || isEmissionUnit;
                legendEnergyEmissionGroup.visible = !legendCostGroup.visible;
                bluePlotLineVisible = !legendCostGroup.visible;

                var userEnergyConsumption:Number = resultData.userEnergyConsumption;
                var userEnergySqMConsumption:Number = resultData.unitSurfaceUserEnergyConsumption;
                var finalEnergyConsumption:Number = resultData.finalEnergyConsumption;
                var finalEnergySqMConsumption:Number = resultData.unitSurfaceFinalEnergyConsumption;
                var primaryEnergyConsumption:Number = resultData.primaryEnergyConsumption;
                var primaryEnergySqMConsumption:Number = resultData.unitSurfacePrimaryEnergyConsumption;

                userEnergyTotalConsumptionString = getTotalConsumptionEnergyString(userEnergyConsumption, conversionData);
                finalEnergyTotalConsumptionString = getTotalConsumptionEnergyString(finalEnergyConsumption, conversionData);
                primaryEnergyTotalConsumptionString = getTotalConsumptionEnergyString(primaryEnergyConsumption, conversionData);
                userEnergyTotalConsumptionSqMeterString = " " + getTotalConsumptionEnergyString(userEnergySqMConsumption, conversionData, 100000);
                finalEnergyTotalConsumptionSqMeterString = " " + getTotalConsumptionEnergyString(finalEnergySqMConsumption, conversionData, 100000);
                primaryEnergyTotalConsumptionSqMeterString = " " + getTotalConsumptionEnergyString(primaryEnergySqMConsumption, conversionData, 100000);

                userEnergyTotalConsumptionUnitNameRichText.text = getAdjustedEnergyUnitName(userEnergyConsumption, conversionData.selectedUnit);
                userEnergyTotalConsumptionSqMeterUnitNameRichText.text = getAdjustedEnergyUnitName(userEnergySqMConsumption, conversionData.selectedUnit);
                finalEnergyTotalConsumptionUnitNameRichText.text = getAdjustedEnergyUnitName(finalEnergyConsumption, conversionData.selectedUnit);
                finalEnergyTotalConsumptionSqMeterUnitNameRichText.text = getAdjustedEnergyUnitName(finalEnergySqMConsumption, conversionData.selectedUnit);
                primaryEnergyTotalConsumptionUnitNameRichText.text = getAdjustedEnergyUnitName(primaryEnergyConsumption, conversionData.selectedUnit);
                primaryEnergyTotalConsumptionSqMeterUnitNameRichText.text = getAdjustedEnergyUnitName(primaryEnergySqMConsumption, conversionData.selectedUnit);


                yearlyCost = resultData.yearlyCost;

                yearlyCostValueLabel.text = formatHMValue(resultData.yearlyCost) + " " + resourceManager.getString('hm', currencyCode);

                energyClass = EnergyClassHelper.getEnergyClass(resultData.unitSurfaceFinalEnergyClassConsumption);
                energyClassCodeLabel.text = energyClass.code;
                energyClassCodeLabel.setStyle("color", energyClass.color);
                energyClassDescriptionLabel.text = resourceManager.getString('hm', energyClass.description);
                energyClassDescriptionLabel.setStyle("color", energyClass.color);

                energyClassCodeLabel.visible = !energyClass.separateIconUrl;
                passiveLogoImg.visible = energyClass.separateIconUrl;

            } catch (e:Error) {
                Alert.show("Plot error: " + e.message);
            }
        }

        override public function langChanged(lang:String):void {
            if (isCostUnit) {
                costEmissionLegendText.text = resourceManager.getString('hm', 'hm.label.monthly_cost');
                costEmissionLegendItemText.text = resourceManager.getString('hm', 'hm.label.costs');
            }
            else if (isEmissionUnit) {
                costEmissionLegendText.text = resourceManager.getString('hm', 'hm.label.monthly_emission');
                costEmissionLegendItemText.text = resourceManager.getString('hm', 'hm.label.emissions');
            }
            energyClassDescriptionLabel.text = resourceManager.getString('hm', energyClass.description);
            yearlyCostValueLabel.text = formatHMValue(yearlyCost) + " " + resourceManager.getString('hm', currencyCode);
        }


        private function popupInitialized():void {
            panelLabelWidth = (chart.width - gutterLeft - gutterRight) + (chart.width - gutterLeft - gutterRight) / 12;
        }

        private function plotCreated():void {
            _originalChartWidth = chart.width;
        }

        private function closePlot():void {
            HeatMaster.getInstance().hideMonthlyReport();
        }

        private function getTotalConsumptionEnergyString(energyConsumption:Number, conversionData:ConversionData, limitPrecisionThreshold:Number = Number.NaN):String {
            var energyUnitName:String = getAdjustedEnergyUnitName(energyConsumption, conversionData.selectedUnit);
            var energyConsumptionVal:Number = adjustNumber(energyConsumption);
            var decimalNumber:int = getDecimalNumbersCount(energyConsumption,
                    ConversionUnits.isGJUnit(conversionData.selectedUnit), energyUnitName == "MWh");

            if (isNaN(limitPrecisionThreshold)) {
                return formatHMValue(energyConsumptionVal, decimalNumber)
            }

            return formatHMValue(energyConsumptionVal, energyConsumptionVal < limitPrecisionThreshold ? Math.max(1, decimalNumber) : 0);
        }

        private function getDecimalNumbersCount(value:Number, isGJUnit:Boolean, isMGWhUnit:Boolean):int {
            var decimalNumber:int = 0;
            if (isGJUnit) {
                var formattedGJValue:String = formatHMValue(value);
                if (formattedGJValue.length <= 2) {
                    decimalNumber = 3;
                }
                else if (formattedGJValue.length <= 4) {
                    decimalNumber = 2;
                }
                else if (formattedGJValue.length <= 5) {
                    decimalNumber = 1;
                }
            }
            else {
                if (isMGWhUnit) {
                    decimalNumber = 2;
                    var formattedMWhValue:String = formatHMValue(value);
                    if (formattedMWhValue.length >= 5) {
                        decimalNumber = 2 - (7 - Math.min(6, formattedMWhValue.length));
                    }
                }
            }
            return decimalNumber;
        }


        private function formatEnergyText(value:Number, unitName:String, precision:int, textLength:int):String {
            var formatted:String = formatHMValue(value, precision) + " " + unitName;
            if (formatted.length < textLength) {
                formatted = formatted + StringUtil.repeat(" ", textLength - formatted.length);
            }
            return formatted;
        }

        private function adjustNumber(value:Number):Number {
            var r:int = value / 1000000;
            if (r == 0) {
                return value;
            }
            var k:int = 0;
            while (k < Number.MAX_VALUE) {
                if (r >= Math.pow(10, k) && r < Math.pow(10, k + 3)) {
                    return value / Math.pow(10, k + 3);
                }
                k = k + 3;
            }
            return value;
        }

        private function getAdjustedEnergyUnitName(value:Number, selectedUnit:int):String {
            if (ConversionUnits.isGJUnit(selectedUnit)) {
                var prefixJ:String = "G";
                var rJ:int = value / 1000000;
                rJ = Math.pow(10, rJ);
                if (rJ >= 10) {
                    prefixJ = "T";
                }
                if (rJ >= 1000) {
                    prefixJ = "P";
                }
                return prefixJ + "J";
            }
            else {
                var prefix:String = "k";
                var r:int = value / 1000000;
                if (r >= 1) {
                    prefix = "M";
                }
                if (r >= 1000) {
                    prefix = "G";
                }
                if (r > 1000000) {
                    prefix = "T";
                }
                return prefix + "Wh";
            }
        }

        private function chooseMainLabelText(conversionData:ConversionData):String {
            var result:String = costMainLabel;
            if (ConversionUnits.isCostUnit(conversionData.selectedUnit)) {
                result = costMainLabel;
            }
            else if (ConversionUnits.isKiloWattsUnit(conversionData.selectedUnit)) {
                result = mainLabelKWh;
            }
            else if (conversionData.selectedUnit == ConversionUnits.ENERGY_WATTS) {
                result = mainLabelWatts;
            }
            else if (conversionData.selectedUnit == ConversionUnits.ENERGY_GJ_PER_YEAR) {
                result = mainLabelGJ;
            }
            return result;
        }

        private function defineLabel(labelValue:Object, previousLabelValue:Object, ax:CategoryAxis, labelItem:Object):String {
            var monthName:String = labelItem.monthName;
            var enBalance:String = labelItem.enBalance.toString();
            return monthName + "\n" + enBalance;
        }

        private function openPrimaryFinalEnergyToolTip(evt:MouseEvent):void {
            var heatMaster:HeatMaster = HeatMaster.getInstance();
            var toolTip:FinalPrimaryEnergyToolTip = new FinalPrimaryEnergyToolTip();

            var x:int = evt.stageX - 20;
            var y:int = evt.stageY - 20;

            if (toolTip != null) {
                heatMaster.addToolTip(x, y, toolTip);
            }
        }

        private function openClassEnergyToolTip(evt:MouseEvent):void {
            var heatMaster:HeatMaster = HeatMaster.getInstance();
            var toolTip:EnergyClassToolTip = new EnergyClassToolTip();

            var x:int = evt.stageX - 20;
            var y:int = evt.stageY - 20;

            if (toolTip != null) {
                heatMaster.addToolTip(x, y, toolTip);
            }
        }

        private function getFontRatio():Number {
            if (this.width <= 1154) {
                return 11 / 12;
            }
            return 1;
        }

        private function getWidthRatio():Number {
            if (this.width <= 1154) {
                return 15 / 16;
            }
            return 1;
        }

        private function getOffsetRatio():Number {
            if (this.width <= 1154) {
                return 0.6;
            }
            return 1;
        }

        private function getFirstOffsetRatio():Number {
            if (this.width <= 1154) {
                return 0.8;
            }
            return 1;
        }
        ]]></fx:Script>

    <!--backgroundColor="0xd3d3d3"-->
    <s:BorderContainer id="plotContainer" height="100%" width="100%" backgroundAlpha="0.0" borderVisible="false">
        <mx:Image x="0" y="0" id="plotBkgImg" maintainAspectRatio="false" width="{this.width}" height="{this.height}"
                  source="@Embed('/pl/znr/heatmaster/assets/images/report/raport_bkg.png')" />
        <mx:Button x="{40 * getOffsetRatio()}" y="5" id="primaryFinalInfoIcon" buttonMode="true"
                   skin="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon.png')"
                   overSkin="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon_over.png')"
                   click="openPrimaryFinalEnergyToolTip(event)"/>




        <!--USER ENERGY -->
        <s:Label x="{primaryFinalInfoIcon.x + 30 * getFirstOffsetRatio()}" y="12" id="userEnergyMainLabel"
                 styleName="reportBlackLabel"
                 fontSize="{12 * getFontRatio()}"
                 text="{resourceManager.getString('hm','hm.label.effective_energy.consumption')}"/>

        <s:RichText id="userEnergyTotalConsumptionRichText" x="{primaryEnergyMainLabel.x + primaryEnergyMainLabel.width + 30 * getFirstOffsetRatio()}" y="{userEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{60 * getWidthRatio()}" styleName="reportBlackLabel" textAlign="right"
                text="{userEnergyTotalConsumptionString}"/>

        <s:RichText id="userEnergyTotalConsumptionUnitNameRichText" x="{userEnergyTotalConsumptionRichText.x + userEnergyTotalConsumptionRichText.width + 5 * getFirstOffsetRatio()}" y="{userEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{30 * getWidthRatio()}" styleName="reportBlackLabel" textAlign="left"
                    text=""/>

        <s:RichText id="sqMeterRichText1" styleName="reportBlackLabel"
                    x="{userEnergyTotalConsumptionRichText.x + userEnergyTotalConsumptionRichText.width + 90 * getFirstOffsetRatio()}" y="{userEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{60 * getWidthRatio()}" textAlign="right" >
            <s:textFlow>
                <s:TextFlow textAlign="right">
                    <s:span>{resourceManager.getString('hm','hm.label.per')} 1m</s:span>
                    <s:span baselineShift="superscript" digitWidth="tabular">2</s:span>
                    <s:span whiteSpaceCollapse="preserve">: </s:span>
                </s:TextFlow>
            </s:textFlow>
        </s:RichText>

        <s:RichText id="userEnergyTotalConsumptionSqMeterRichText" styleName="reportBlackLabel"
                    x="{sqMeterRichText1.x + sqMeterRichText1.width/4}" y="{userEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{90 * getWidthRatio()}" textAlign="right" text="{userEnergyTotalConsumptionSqMeterString}" >
        </s:RichText>

        <s:RichText id="userEnergyTotalConsumptionSqMeterUnitNameRichText" x="{userEnergyTotalConsumptionSqMeterRichText.x + userEnergyTotalConsumptionSqMeterRichText.width + 5 * getFirstOffsetRatio()}" y="{userEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{30 * getWidthRatio()}" styleName="reportBlackLabel" textAlign="left"
                    text=""/>

        <!--FINAL ENERGY-->
        <s:Label id="finalEnergyMainLabel" x="{primaryFinalInfoIcon.x + 30 * getFirstOffsetRatio()}" y="{userEnergyMainLabel.y + 20}"
                 styleName="reportGrayLabel"   text="{resourceManager.getString('hm','hm.label.final_energy.consumption')}"
                 fontSize="{12 * getFontRatio()}"/>


        <s:RichText id="finalEnergyTotalConsumptionRichText" x="{userEnergyTotalConsumptionRichText.x}" y="{finalEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{60 * getWidthRatio()}" styleName="reportGrayLabel" textAlign="right"
                    text="{finalEnergyTotalConsumptionString}"/>

        <s:RichText id="finalEnergyTotalConsumptionUnitNameRichText" x="{userEnergyTotalConsumptionUnitNameRichText.x}" y="{finalEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{30 * getWidthRatio()}" styleName="reportGrayLabel" textAlign="left"
                    text=""/>

        <s:RichText id="sqMeterRichText2" styleName="reportGrayLabel"
                    x="{sqMeterRichText1.x}" y="{finalEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{60 * getWidthRatio()}" textAlign="right">
            <s:textFlow>
                <s:TextFlow>
                    <s:span>{resourceManager.getString('hm','hm.label.per')} 1m</s:span>
                    <s:span baselineShift="superscript" digitWidth="tabular">2</s:span>
                    <s:span whiteSpaceCollapse="preserve">: </s:span>
                </s:TextFlow>
            </s:textFlow>
        </s:RichText>

        <s:RichText id="finalEnergyTotalConsumptionSqMeterRichText" styleName="reportGrayLabel"  x="{userEnergyTotalConsumptionSqMeterRichText.x}" y="{finalEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{90 * getWidthRatio()}" textAlign="right" text=" {finalEnergyTotalConsumptionSqMeterString}" >
        </s:RichText>

        <s:RichText id="finalEnergyTotalConsumptionSqMeterUnitNameRichText" x="{userEnergyTotalConsumptionSqMeterUnitNameRichText.x}" y="{finalEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{30 * getWidthRatio()}" styleName="reportGrayLabel" textAlign="left"
                    text=""/>


        <!--PIRMARY ENERGY-->
        <s:Label id="primaryEnergyMainLabel" x="{finalEnergyMainLabel.x}" y="{finalEnergyMainLabel.y + 20 * getWidthRatio()}"
                 styleName="reportDarkGrayLabel"  text="{resourceManager.getString('hm','hm.label.primary_energy.consumption')}"
                 fontSize="{12 * getFontRatio()}"/>

        <s:RichText id="primaryEnergyTotalConsumptionRichText" x="{userEnergyTotalConsumptionRichText.x}" y="{primaryEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{60 * getWidthRatio()}" styleName="reportGrayLabel" textAlign="right"
                    text="{primaryEnergyTotalConsumptionString}"/>

        <s:RichText id="primaryEnergyTotalConsumptionUnitNameRichText" x="{userEnergyTotalConsumptionUnitNameRichText.x}" y="{primaryEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{30 * getWidthRatio()}" styleName="reportGrayLabel" textAlign="left"
                    text=""/>

        <s:RichText id="sqMeterRichText3" styleName="reportGrayLabel"
                    x="{sqMeterRichText1.x}" y="{primaryEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{60 * getWidthRatio()}" textAlign="right">
            <s:textFlow>
                <s:TextFlow>
                    <s:span>{resourceManager.getString('hm','hm.label.per')} 1m</s:span>
                    <s:span baselineShift="superscript" digitWidth="tabular">2</s:span>
                    <s:span whiteSpaceCollapse="preserve">: </s:span>
                </s:TextFlow>
            </s:textFlow>
        </s:RichText>

        <s:RichText id="primaryEnergyTotalConsumptionSqMeterRichText" styleName="reportGrayLabel"  x="{userEnergyTotalConsumptionSqMeterRichText.x}" y="{primaryEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{90 * getWidthRatio()}" text="{primaryEnergyTotalConsumptionSqMeterString}" textAlign="right">
        </s:RichText>

        <s:RichText id="primaryEnergyTotalConsumptionSqMeterUnitNameRichText" x="{userEnergyTotalConsumptionSqMeterUnitNameRichText.x}" y="{primaryEnergyMainLabel.y}"
                    fontSize="{12 * getFontRatio()}" width="{30 * getWidthRatio()}" styleName="reportGrayLabel" textAlign="left"
                    text=""/>

        <mx:VRule id="vRule1"
                  x="{userEnergyTotalConsumptionSqMeterUnitNameRichText.x + userEnergyTotalConsumptionSqMeterUnitNameRichText.width + 20 * this.width/1200}"
                  y="{userEnergyMainLabel.y + 5}" height="40" width="1"/>
        <s:Label id="yearlyCostLabel" x="{vRule1.x + vRule1.width + 50 * getOffsetRatio()}" y="{vRule1.y + 5}"
                 text="{resourceManager.getString('hm','hm.label.energy_cost')}" styleName="popupPanelHeader"
                 fontSize="{14 * getFontRatio()}"/>
        <mx:VRule id="vRule2" x="{yearlyCostLabel.x + yearlyCostLabel.width + 50 * getOffsetRatio()}" y="{vRule1.y}"
                  height="40" width="1"/>

        <mx:Button x="{vRule2.x + vRule2.width + 50 * getOffsetRatio()}" y="{5}" id="energyClassInfoIcon"
                   buttonMode="true"
                   skin="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon.png')"
                   overSkin="@Embed('/pl/znr/heatmaster/assets/images/icons/info_icon_over.png')"
                   click="openClassEnergyToolTip(event)"/>

        <s:Label x="{energyClassInfoIcon.x + 30 * getFirstOffsetRatio()}" y="{vRule1.y}" id="energyClassLabel"
                 text="{resourceManager.getString('hm','hm.label.energy_class')}"
                 styleName="reportBlackLabel" fontSize="{12 * getFontRatio()}"/>
        <s:Label x="{energyClassLabel.x + energyClassLabel.width + 60 * getOffsetRatio()}" y="{vRule1.y}"
                 id="energyClassCodeLabel" text="F"
                 styleName="popupPanelHeader" fontSize="{47 * getFontRatio()}"/>



        <s:Label id="yearlyCostValueLabel" x="{yearlyCostLabel.x}" y="{vRule1.y + 25 * this.width/1200}"
                 width="{yearlyCostLabel.width}" text="7321 zl"
                 textAlign="center" styleName="popupPanelHeader" fontSize="{14 * getFontRatio()}"/>

        <s:Label x="{energyClassLabel.x}" y="{vRule1.y + 20 * this.width/1200}" id="energyClassDescriptionLabel"
                 text="Bardzo energochłonny"
                 styleName="popupPanelHeader" fontSize="{12 * getFontRatio()}"/>

        <s:Image id="passiveLogoImg" visible="false" scaleX="0.1" scaleY="0.1" x="{energyClassCodeLabel.x}"
                 y="{energyClassCodeLabel.y}"
                 source="@Embed('/pl/znr/heatmaster/assets/images/icons/Passivelogo.png')"/>

        <!--<s:Label id="mainPlotLabel" y="0" height="10%" x="{chart.x + gutterLeft}" width="{chart.width - gutterLeft - gutterRight}"
                 text="" textAlign="center" verticalAlign="middle" fontSize="16" fontWeight="bold"/>-->

        <mx:ColumnChart id="chart" y="{plotContainer.height * 0.15}" gutterLeft="{gutterLeft}"
                        gutterRight="{gutterRight}"
                        gutterTop="0" gutterBottom="{gutterBottom}" dataProvider="{plotDataProvider}"
                        showAllDataTips="false" width="{this.width - 180}" height="75%">
            <mx:horizontalAxis>
                <mx:CategoryAxis id="monthAxis"/>
            </mx:horizontalAxis>

            <mx:verticalAxis>
                <mx:LinearAxis id="valueAxis" minimum="{yMinValue}" maximum="{yMaxValue}" interval="{yInterval}" labelFunction="verticalAxisLabelFunction">
                </mx:LinearAxis>
            </mx:verticalAxis>

            <mx:verticalAxisRenderers>
                <mx:AxisRenderer x="30" axis="{valueAxis}" styleName="verticalAxisStyle" tickPlacement="none"
                                 minorTickPlacement="none">
                    <mx:axisStroke>
                        <mx:SolidColorStroke
                                color="0x78838F"
                                weight="2"
                                caps="square"/>
                    </mx:axisStroke>
                </mx:AxisRenderer>
            </mx:verticalAxisRenderers>

            <mx:horizontalAxisRenderers>
                <mx:AxisRenderer axis="{monthAxis}" labelAlign="center" showLine="false">
                    <mx:axisStroke>
                        <mx:SolidColorStroke color="0x78838F"
                                             weight="1"
                                             caps="square"/>
                    </mx:axisStroke>
                </mx:AxisRenderer>
            </mx:horizontalAxisRenderers>

            <mx:series>
                <mx:ColumnSeries
                        yField="enLosses"
                        minField="enGains"
                        labelField="{unitName}"
                        itemRenderer="pl.znr.heatmaster.ui.renderer.CustomPlotColumnRenderer"/>


                <mx:LineSeries yField="netLoss" interpolateValues="true" dataProvider="{lineSeriesDataProvider}"
                               visible="{bluePlotLineVisible}">
                    <mx:lineStroke>
                        <mx:SolidColorStroke color="blue" weight="2"/>
                    </mx:lineStroke>
                    <mx:horizontalAxis>
                        <mx:LinearAxis minimum="0" maximum="24"/>
                    </mx:horizontalAxis>
                </mx:LineSeries>



            </mx:series>

            <mx:backgroundElements>
                <mx:GridLines>
                    <mx:horizontalFill>
                        <mx:SolidColor color="white"/>
                    </mx:horizontalFill>
                    <mx:horizontalAlternateFill>
                        <mx:SolidColor color="white"/>
                    </mx:horizontalAlternateFill>
                    <mx:horizontalOriginStroke>
                        <mx:SolidColorStroke weight="2" color="gray"/>
                    </mx:horizontalOriginStroke>
                </mx:GridLines>
            </mx:backgroundElements>
        </mx:ColumnChart>



        <s:Group visible="false" y="{plotContainer.height * 0.15}" x="{chart.x + chart.width + 5}"
                 width="12%" id="legendCostGroup" styleName="reportLegendVerticalLabel">
            <s:layout>
                <s:VerticalLayout/>
            </s:layout>

            <s:RichText id="costEmissionLegendText" fontWeight="bold" fontSize="13"
                        text="{resourceManager.getString('hm','hm.label.monthly_cost')}"/>

            <s:Group width="100%">
                <s:layout>
                    <s:HorizontalLayout paddingTop="3" paddingBottom="3"/>
                </s:layout>
                <s:Rect width="{mainLegendRectWidth}" height="{mainLegendRectHeight}">
                    <s:fill>
                        <s:SolidColor color="0xF24848"/>
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke weight="1"/>
                    </s:stroke>
                </s:Rect>
                <s:Label id="costEmissionLegendItemText" text="{resourceManager.getString('hm','hm.label.costs')}"
                         paddingTop="{legendRectLabelPaddingTop}"/>
            </s:Group>

        </s:Group>


        <panel:VerticalPlotLegend y="{plotContainer.height * 0.15}" x="{chart.x + chart.width + 5}" width="12%"
                                       id="legendEnergyEmissionGroup"
                                       styleName="reportLegendVerticalLabel"/>


        <!--<s:Group id="monthLabels" y="{chart.y + chart.height}" x="{chart.x + gutterLeft}" width="{chart.width - gutterLeft - gutterRight}"/>-->
        <panel:HorizontaAxisLabelPanel id="panelLabel" y="{chart.y + chart.height}" x="{chart.x + gutterLeft}"
                                            width="{7* (chart.width - gutterLeft)/6}" visible="true"/>


        <hmbtn:ImageSkinnableButton x="{plotBkgImg.width - 65}" top="-2" buttonMode="true"
                                    upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/PDF_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/PDF_icon.png')"
                                    overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/PDF_icon_over.png')">
        </hmbtn:ImageSkinnableButton>

        <hmbtn:ImageSkinnableButton x="{plotBkgImg.width - 35}" top="-2" buttonMode="true" click="closePlot()"
                                    upImage="@Embed('/pl/znr/heatmaster/assets/images/icons/close_icon.png')" downImage="@Embed('/pl/znr/heatmaster/assets/images/icons/close_icon.png')"
                                    overImage="@Embed('/pl/znr/heatmaster/assets/images/icons/close_icon_over.png')">
        </hmbtn:ImageSkinnableButton>


    </s:BorderContainer>

</panel:BasePlotPanel>
