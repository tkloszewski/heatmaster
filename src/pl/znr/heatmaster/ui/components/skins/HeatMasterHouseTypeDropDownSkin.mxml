<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2010/01/28/setting-the-width-of-the-dropdown-menu-on-a-spark-dropdownlist-control-in-flex-4/ -->
<s:SparkSkin name="CustomDropDownListSkin"
             xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             alpha.disabled="0.5">
    <!-- states -->
    <s:states>
        <s:State name="normal" />
        <s:State name="open" />
        <s:State name="disabled" />
    </s:states>

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[
        [HostComponent("spark.components.DropDownList")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
        import mx.controls.Alert;
        import mx.events.DragEvent;
        import mx.events.FlexEvent;

        import spark.events.DropDownEvent;

        /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
        static private const contentFill:Array = ["bgFill"];

        override public function get contentItems():Array {
            return contentFill
        };

        private var firstImgClicked:Boolean = false;
        private var opened:Boolean = false;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            if (getStyle("borderVisible") == false) {
                if (border) {
                    border.visible = false;
                }
                if (background) {
                    background.left = background.top = background.right = background.bottom = 0;
                }
                if (scroller) {
                    scroller.minViewportInset = 0;
                }
            } else {
                if (border) {
                    border.visible = true;
                }
                if (background) {
                    background.left = background.top = background.right = background.bottom = 1;
                }
                if (scroller) {
                    scroller.minViewportInset = 1;
                }
            }

            if (dropShadow) {
                dropShadow.visible = getStyle("dropShadowVisible");
            }

            openButton.setStyle("cornerRadius", getStyle("cornerRadius"));

            if (borderStroke) {
                borderStroke.color = getStyle("borderColor");
                borderStroke.alpha = getStyle("borderAlpha");
            }
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }

        protected function labelDisplay_updateCompleteHandler(evt:FlexEvent):void {
            hostComponent.toolTip = labelDisplay.toolTip;
        }

        private function show():void {
            if (!firstImgClicked) {
                firstImgClicked = true;
            }
            if (!opened) {
                hostComponent.openDropDown();
            }
            opened = !opened;

        }


        ]]>
    </fx:Script>

    <!---
     The PopUpAnchor control that opens the drop-down list.

     <p>In a custom skin class that uses transitions, set the
     <code>itemDestructionPolicy</code> property to <code>none</code>.</p>
    -->
    <s:PopUpAnchor id="popUp"
                   displayPopUp.normal="false" displayPopUp.open="true"
                   includeIn="open"
                   left="0" right="0" top="0" bottom="0"
                   itemDestructionPolicy="auto"
                   popUpPosition="below"
                   popUpWidthMatchesAnchorWidth="false">

        <!---
         This includes borders, background colors, scrollers, and filters.
        -->
        <s:Group id="dropDown"  minHeight="22">

            <s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="1.0" distance="5"
                                     angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>

            <!-- border -->
            <s:Rect id="border" left="0" right="0" top="0" bottom="0">
                <s:stroke>
                    <s:SolidColorStroke id="borderStroke" color="0x686868" weight="1"/>
                </s:stroke>
            </s:Rect>

            <!-- fill -->
            <!--- Defines the appearance of drop-down list's background fill. -->
            <s:Rect id="background" left="1" right="1" top="1" bottom="1" >
                <s:fill>
                    <!--- The color of the drop down's background fill. The default color is 0xFFFFFF. -->
                    <s:SolidColor id="bgFill" color="0xf5fffa" />
                </s:fill>
            </s:Rect>

            <s:Scroller id="scroller"
                        left="3" top="3" right="3" bottom="3"

                        hasFocusableChildren="false"
                        minViewportInset="1">
                <s:DataGroup id="dataGroup"
                        >
                    <s:layout>
                        <s:TileLayout requestedColumnCount="3" requestedRowCount="6"/>
                    </s:layout>

                    <s:itemRenderer>
                        <fx:Component>
                            <s:ItemRenderer >
                                <s:states>

                                    <s:State name="normal" />
                                    <s:State name="hovered" />
                                    <s:State name="selected" />

                                </s:states>


                                <s:layout>
                                    <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
                                </s:layout>
                                <s:Label text="{data.name}" color.hovered="red"/>
                                <s:BitmapImage source="{data.imageFile}" scaleX="0.3" scaleY="0.3" />

                            </s:ItemRenderer>
                        </fx:Component>
                    </s:itemRenderer>

                </s:DataGroup>
            </s:Scroller>
        </s:Group>
    </s:PopUpAnchor>

    <!---  The default skin is DropDownListButtonSkin. -->
    <s:Button id="openButton"
              skinClass="spark.skins.spark.DropDownListButtonSkin"
              focusEnabled="false"
              left="0" right="0" top="0" bottom="0" />

    <s:Label id="labelDisplay"
             maxDisplayedLines="1"
             mouseEnabled="false" mouseChildren="false"
             left="7"  top="2" bottom="2"
             width="75%"
             verticalAlign="middle"
             verticalCenter="1"
             showTruncationTip="true"
             updateComplete="labelDisplay_updateCompleteHandler(event);" />

    <s:Image source="{hostComponent.selectedItem.previewImage}"
                   right="35" top="2" bottom="2" verticalAlign="middle" click="show()"/>

</s:SparkSkin>